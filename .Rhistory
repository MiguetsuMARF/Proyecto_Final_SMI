names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("A","B","C")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("A","C","B")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
linkmap(Nuestro_primer_mapa, chr = c(1))
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("A","C","B")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("A","B","B")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("Gen 1","Gen 2","Gen 3")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("Gen 1","Gen 3","Gen 2")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
Genes <- c("Gen 1","Gen 2","Gen 3")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("Gen 1","Gen 2","Gen 3")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("Gen 1","Gen 2","Gen 3")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("Gen 1","Gen 3","Gen 2")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1))
linkmap(Nuestro_primer_mapa, chr = c(1)) -> Mapa_genetico
png("Mapa_genetio.png", width = 400, height = 600)
plot(1:10, main = "Mapa_genetico")
dev.off()
png("Mapa_genetico.png", width = 400, height = 600)
plot(1:10, main = "Mapa_genetico")
dev.off()
linkmap(Nuestro_primer_mapa, chr = c(1)) -> Mapa_genetico
png("Mapa_genetico.png", width = 400, height = 600)
plot(1:10, main = "Mapa_genetico")
dev.off()
png("Mapa_genetico.png", width = 400, height = 600)
plot("Mapa_genetico")
png("Mapa_genetico.png", width = 400, height = 600)
dev.off()
png("Mapa_genetico.png", width = 400, height = 600)
dev.off()
png("Mapa_genetico.png", width = 400, height = 600)
linkmap(Nuestro_primer_mapa, chr = c(1)) -> Mapa_genetico
dev.off()
png("Mapa_genetico.png", width = 300, height = 600)
linkmap(Nuestro_primer_mapa, chr = c(1)) -> Mapa_genetico
dev.off()
png("Mapa_genetico.png", width = 200, height = 600)
linkmap(Nuestro_primer_mapa, chr = c(1)) -> Mapa_genetico
dev.off()
png("Mapa_genetico.png", width = 400, height = 600)
linkmap(Nuestro_primer_mapa, chr = c(1)) -> Mapa_genetico
dev.off()
str(frecuencias_fenotipicas)
prueba3puntos.no <- function(gen1,gen2,gen3, dominancia = FALSE){
posibles_combinaciones <- list(
c("s","s","s"),
c("n","s","s"),
c("n","s","n"),
c("n","n","s"),
c("n","n","n"),
c("s","n","s"),
c("s","n","n"),
c("s","s","n")
)
if (dominancia == FALSE){
expresion_parental1 <- c(
readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n")),
readline(prompt = cat("Hay expresion fenotipica de", gen2,"en el progenitor 1? s/n")),
readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
)
expresion_parental2 <- c(
readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 2? s/n")),
readline(prompt = cat("Hay expresion fenotipica de", gen2,"en el progenitor 2? s/n")),
readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 2? s/n"))
)
if (all((expresion_parental1 == expresion_parental2) == FALSE)){
if (all (posibles_combinaciones[[1]] == expresion_parental1)){
frecuencias_fenotipicas <- data.frame(
parentales = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, gen2,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que no presentan expresion fenotipica de alguno de los genes (wt)?: ")))),
recombinantes_simples_1 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, gen3, "?: ")))),
recombinantes_simples_2 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen2, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen3, "?: ")))),
recombinantes_dobles = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, "?: "))))
)
}else if(all (posibles_combinaciones[[2]] == expresion_parental1)){
frecuencias_fenotipicas <- data.frame(
parentales = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen2,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, "?: ")))),
recombinantes_simples_1 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que no presentan expresion fenotipica de alguno de los genes (wt)?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, gen2,gen3, "?: ")))),
recombinantes_simples_2 = as.numeric(c(readline (prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen3, "?: ")))),
recombinantes_dobles = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen2, "?: "))))
)
}else if(all (posibles_combinaciones[[3]] == expresion_parental1)){
frecuencias_fenotipicas <- data.frame(
parentales = as.numeric(c(readline (prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen3, "?: ")))),
recombinantes_simples_1 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen2, "?: ")))),
recombinantes_simples_2 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen2,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, "?: ")))),
recombinantes_dobles = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que no presentan expresion fenotipica de alguno de los genes (wt)?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, gen2,gen3, "?: "))))
)
}else if(all (posibles_combinaciones[[4]] == expresion_parental1)){
frecuencias_fenotipicas <- data.frame(
parentales = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen2, "?: ")))),
recombinantes_simples_1 = as.numeric(c(readline (prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen3, "?: ")))),
recombinantes_simples_2 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que no presentan expresion fenotipica de alguno de los genes (wt)?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, gen2,gen3, "?: ")))),
recombinantes_dobles = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen2,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, "?: "))))
)
}else if(all (posibles_combinaciones[[5]] == expresion_parental1)){
frecuencias_fenotipicas <- data.frame(
parentales = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que no presentan expresion fenotipica de alguno de los genes (wt)?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, gen2,gen3, "?: ")))),
recombinantes_simples_1 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen2,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, "?: ")))),
recombinantes_simples_2 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen2, "?: ")))),
recombinantes_dobles = as.numeric(c(readline (prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen3, "?: "))))
)
}else if(all (posibles_combinaciones[[6]] == expresion_parental1)){
frecuencias_fenotipicas <- data.frame(
parentales = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, "?: ")))),
recombinantes_simples_1 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen2, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen3, "?: ")))),
recombinantes_simples_2 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, gen3, "?: ")))),
recombinantes_dobles = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, gen2,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que no presentan expresion fenotipica de alguno de los genes (wt)?: "))))
)
}else if(all (posibles_combinaciones[[7]] == expresion_parental1)){
frecuencias_fenotipicas <- data.frame(
parentales = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, gen3, "?: ")))),
recombinantes_simples_1 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, gen2,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que no presentan expresion fenotipica de alguno de los genes (wt)?: ")))),
recombinantes_simples_2 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, "?: ")))),
recombinantes_dobles = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen2, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen3, "?: "))))
)
}else if(all (posibles_combinaciones[[8]] == expresion_parental1)){
frecuencias_fenotipicas <- data.frame(
parentales = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen2, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen3, "?: ")))),
recombinantes_simples_1 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de",gen1,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, "?: ")))),
recombinantes_simples_2 = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, gen2,gen3, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que no presentan expresion fenotipica de alguno de los genes (wt)?: ")))),
recombinantes_dobles = as.numeric(c(readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen1, "?: ")),
readline(prompt = cat("Cual es la frecuencia de individuos luego de cruza de prueba que presentan expresion fenotipica de", gen2, gen3, "?: "))))
)
}
dz1 <- ((sum(frecuencias_fenotipicas$recombinantes_simples_1)/sum(frecuencias_fenotipicas))+
(sum(frecuencias_fenotipicas$recombinantes_dobles)/sum(frecuencias_fenotipicas)))*100
dz2 <- ((sum(frecuencias_fenotipicas$recombinantes_simples_2)/sum(frecuencias_fenotipicas))+
(sum(frecuencias_fenotipicas$recombinantes_dobles)/sum(frecuencias_fenotipicas)))*100
cc <- (sum(frecuencias_fenotipicas$recombinantes_dobles)/sum(frecuencias_fenotipicas))/
((dz1/100)*(dz2/100))
ci <- abs(1-cc)
}else{
print("ERROR \n
Tu prueba de 3 puntos está mal planeada ya que los individuos parentales tienen genotipos similares")
}
}else{
print("ERROR \n
Tu prueba de 3 puntos está mal planeada ya que los genes a evaluar deben de tener expresion recesiva, no dominante")## Aqui va lo que pasa si el fenotipo no es recesivo
}
# Aqui vamos a poner todo lo que queremos que de como resultado la funcion
frecuencias_fenotipicas
dz1
dz2
cc
ci # La base de datos que contiene ordenados los datos de frecuencia
}
frecuencias_fenotipicas
str(frecuencias_fenotipicas)
library("qtl")
# funcion que usaremos #
linkmap <- function(object, chr, chr.space = 2, m.cex = 0.6, interval = FALSE, ruler = FALSE, ...){
# VERSION: 1.1.0
# object: a "cross" object from R/qtl, or a "map" class from the output of "pull.map" in R/qtl, or a data frame with marker column, chromosme column and position column named as "mar", "chr" and "pos", respectively
# chr: a vector of chromosome names that need to be drawn.
# chr.space: space between each chromosomes
# m.cex: font size
# interval: NULL/TRUE/FALSE: plot no distance/marker interval/absolute distance. Default is absolute distance.
# ruler: whether to draw a common left ruler on the left
# ...: other plot parameters
if ("data.frame" %in% class(object)){ # transform to a list
pos = object$pos
names(pos) = object$mar
map = split(pos,object$chr)
} else if ("cross" %in% class(object)){
map <- pull.map(object)
} else map = object # a map object or list
dots <- list(...) # extra parameters inputed by user
old.xpd <- par("xpd")
par(xpd = TRUE)
on.exit(par(xpd = old.xpd))
if(!missing(chr)) {
if(any(is.na(pmatch(chr, names(map)))))
stop("Some names of chromosome(s) subset do not match names of map.")
map <- map[chr]
}
n.chr <- length(map)
#mt <- list()
maxlen <- max(unlist(lapply(map, max)))
minlen <- min(unlist(lapply(map, min)))
omap <- map # omap is original map
if(!is.na(pmatch("cex", names(dots))))
dots$cex <- NULL
#    else cex <- par("cex")
chrpos <- seq(1, n.chr * chr.space, by = chr.space)
thelim <- range(chrpos) + c(-1.0, 1.0)
# function to get actual plotting postion
finalPos = function(pos, maxlen) {#pos is a vector of positions of A genetic map; maxlen is the length of chromosome segments
posnew = pos
if (length(posnew) > 1){
conv <- par("pin")[2]/maxlen # pin is The current plot dimensions, (width, height), in inches.
for(j in 1:(length(pos) - 1)){
ch <- posnew[j + 1]*conv - (posnew[j]*conv + 10*par("csi")*m.cex/9) # csi is the default font height
#cat(ch)
if (ch < 0){
temp <- posnew[j]*conv + 10*par("csi")*m.cex/9
posnew[j + 1] <- temp/conv
}
}
}
return(posnew)
}
# function to get interval
getInterval = function(pos){#pos is a vector of positions of A genetic map
pos2 = unique(round(pos,1))
ll = length(pos2)
pos3 = (pos2[1:(ll-1)] + pos2[2:ll])/2 # map position
pos4 = pos2[2:ll] - pos2[1:(ll-1)] # intervals
return(list(pos3,pos4))
}
# plot left side
total_len = maxlen - minlen # in case chromosome did not start from 0
mt = lapply(map, finalPos, maxlen= total_len) # final label postion on the right
if (!is.null(interval)) {
if (interval) {
map2 = lapply(map, function(x) getInterval(x)[[1]]) # chromsome position for the left
map3 = lapply(map, function(x) getInterval(x)[[2]]) # intervals
mt2 = lapply(map2, finalPos, maxlen=total_len) # distance plotting position on the left
} else {
map2 = map # left and right are the same
map3 = map
mt2 = mt # left and right are the same
}
}
maxlen <- max(c(unlist(lapply(omap, max)),unlist(lapply(mt, max))))
names(mt) <- names(map)
par(mar=c(0.6 ,1.1 ,2.6 ,1.1))
if (ruler) par(mar=c(0.6, 2.1, 2.6, 1.1))
plot(0, 0, type = "n", ylim = c(maxlen, minlen), xlim = thelim,
xaxs = "i", ylab = "", xlab = "", axes = FALSE, ...)
if (ruler) axis(side = 2,  ylim = c(maxlen, minlen))
else chrpos = chrpos - 0.3
## Draw chromosomes
barwidth = 0.14
seglen = 0.06
for(i in 1:n.chr) {
# for the right side plotting
Rstart = chrpos[i] + barwidth # start point for legs on the RIGHT
segments(Rstart, map[[i]], Rstart + seglen, map[[i]])
segments(Rstart + seglen, map[[i]], Rstart + seglen*3, mt[[i]])
segments(Rstart + seglen*3, mt[[i]], Rstart + seglen*4, mt[[i]])
alis <- list(x = Rstart + seglen*4 + 0.05, y = mt[[i]], labels = names(map[[i]]), adj = c(0, 0.5), cex = m.cex)
do.call("text", c(alis, dots)) # draw right labels
# JZ: add distance on the left
if (!is.null(interval)){
Lstart = chrpos[i] - barwidth # start point for legs on the LEFT
segments(Lstart, map2[[i]], Lstart - seglen, map2[[i]])
segments(Lstart - seglen, map2[[i]], Lstart - seglen*3, mt2[[i]])
segments(Lstart - seglen*3, mt2[[i]], Lstart - seglen*4, mt2[[i]])
alisL <- list(x = Lstart - seglen*4 - 0.05, y =  mt2[[i]], labels = format(round(map3[[i]], 1),nsmall=1),adj = c(1, 0.5), cex = m.cex)
do.call("text", c(alisL, dots)) # draw left labels
}
# draw chromosome bar
map[[i]] <- omap[[i]]
barl <- chrpos[i] - barwidth/2
barr <- chrpos[i] + barwidth/2
segments(barl, min(map[[i]]), barl, max(map[[i]]), lwd = 3)
segments(barr, min(map[[i]]), barr, max(map[[i]]), lwd = 3)
segments(barl - barwidth/2, map[[i]], barr + barwidth/2, map[[i]]) # bar ribs
# attempt to put curves at ends of chromosomes
rs <- seq(0,pi,len=100)
r <- (barr - barl)/2 # radius
xunit = par("pin")[1]/abs(par("xaxp")[2] - par("xaxp")[1])
yunit = par("pin")[2]/abs(par("yaxp")[2] - par("yaxp")[1])
xseq <- r*cos(rs)
yseq <- r*sin(rs)*(xunit/yunit)
lines(xseq + chrpos[i], min(map[[i]]) - yseq, lwd=3)
lines(xseq + chrpos[i], max(map[[i]]) + yseq, lwd=3)
}
axis(side = 3, at = chrpos, labels = names(map), tick = F, cex.axis=1.5) # side = 1 for bottom, side=3 for top
#if(is.na(pmatch("main", names(dots))) & !as.logical(sys.parent()))
#  title("Genetic Map")
invisible(list(mt = mt, map = map, chrpos = chrpos))
}
Mi_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) # simulador
linkmap(Mi_primer_mapa, chr = c(1))
# Edición de las distancias entre marcadores
Mi_primer_mapa[["1"]][["D1M1"]]
Mi_primer_mapa[["1"]][["D1M2"]] <- 10 # Si jalo :p
Mi_primer_mapa[["1"]][["D1M3"]] <- 20 # Si jalo :p
linkmap(Mi_primer_mapa, chr = c(1))
Genes <- c("A","B","C")
names(Mi_primer_mapa[["1"]]) <- Genes
Mi_primer_mapa[["1"]][["A"]]
Mi_primer_mapa[["1"]][["B"]]
Mi_primer_mapa[["1"]][["C"]]
linkmap(Mi_primer_mapa, chr = c(1)) # Si funciono c:
frecuencias_fenotipicas$parentales <- as.numeric(frecuencias_fenotipicas$parentales)
frecuencias_fenotipicas$recombinantes_simples_1 <- as.numeric(frecuencias_fenotipicas$recombinantes_simples_1)
frecuencias_fenotipicas$recombinantes_simples_2 <- as.numeric(frecuencias_fenotipicas$recombinantes_simples_2)
frecuencias_fenotipicas$recombinantes_dobles <- as.numeric(frecuencias_fenotipicas$recombinantes_dobles)
sum(frecuencias_fenotipicas$recombinantes_simples_1,
frecuencias_fenotipicas$recombinantes_dobles) -> numerador_1
sum(frecuencias_fenotipicas$recombinantes_simples_2,
frecuencias_fenotipicas$recombinantes_dobles) -> numerador_2
sum(frecuencias_fenotipicas$parentales,
frecuencias_fenotipicas$recombinantes_simples_1,
frecuencias_fenotipicas$recombinantes_simples_2,
frecuencias_fenotipicas$recombinantes_dobles) -> denominador
dist_gen1_gen2 <- (numerador_1/denominador)*100
B <- dist_gen1_gen2
dist_gen2_gen3 <- (numerador_2/denominador)*100
C <- dist_gen2_gen3
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("Gen 1","Gen 3","Gen 2")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1)) -> Mapa_genetico
View(Nuestro_primer_mapa)
names(Nuestro_primer_mapa$1) <- "Prueba de 3 puntos"
Nuestro_primer_mapa
Nuestro_primer_mapa[1]
names(Nuestro_primer_mapa[1]) <- "Prueba de 3 puntos"
Nuestro_primer_mapa
View(Nuestro_primer_mapa)
linkmap(Nuestro_primer_mapa, chr = c(1)) -> Mapa_genetico
Nuestro_primer_mapa[["1"]]
names(Nuestro_primer_mapa["1"]) <- "Prueba de 3 puntos"
Nuestro_primer_mapa
names(Nuestro_primer_mapa$"1") <- "Prueba de 3 puntos"
Nuestro_primer_mapa
View(Nuestro_primer_mapa)
str(Nuestro_primer_mapa[["1"]])
names(Nuestro_primer_mapa) <- "prueba de 3 puntos"
View(Nuestro_primer_mapa)
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("Gen 1","Gen 3","Gen 2")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = c(1)) -> Mapa_genetico
names(Nuestro_primer_mapa) <- "prueba de 3 puntos"
View(Nuestro_primer_mapa)
linkmap(Nuestro_primer_mapa, chr = c(1)) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "prueba de 3 puntos") -> Mapa_genetico
names(Nuestro_primer_mapa) <- "Prueba de 3 puntos"
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos") -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", m.cex = 0.8) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", chr.space = 3 ,m.cex = 0.8) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", chr.space = 5 ,m.cex = 0.8) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", chr.space = 10 ,m.cex = 0.8) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", chr.space = 100 ,m.cex = 0.8) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", chr.space = 0.1 ,m.cex = 0.8) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", chr.space = 0.5 ,m.cex = 0.8) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", chr.space = 1 ,m.cex = 0.8) -> Mapa_genetico
# Ahora Añadire una linea entre los genes 1-2 y entre 2-3
# que me indicará cual es la distancia entre ellos.
finalPos = function(pos, maxlen) {#pos is a vector of positions of A genetic map; maxlen is the length of chromosome segments
posnew = pos
if (length(posnew) > 1){
conv <- par("pin")[2]/maxlen # pin is The current plot dimensions, (width, height), in inches.
for(j in 1:(length(pos) - 1)){
ch <- posnew[j + 1]*conv - (posnew[j]*conv + 10*par("csi")*m.cex/9) # csi is the default font height
#cat(ch)
if (ch < 0){
temp <- posnew[j]*conv + 10*par("csi")*m.cex/9
posnew[j + 1] <- temp/conv
}
}
}
return(posnew)
}
finalPos(1,5)
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos",m.cex = 0.8, finalPos(5,1)) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos",m.cex = 0.8) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos",m.cex = 0.8, interval = TRUE) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos",m.cex = 0.8, interval = NULL) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos",m.cex = 0.8, interval = FALSE) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos",m.cex = 0.8, interval = TRUE) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos",m.cex = 0.8) -> Mapa_genetico
Genes <- c("Gen 1","Gen 2","Gen 3")
names(Nuestro_primer_mapa[["1"]]) <- Genes
names(Nuestro_primer_mapa[["Prueba de 3 puntos"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos") -> Mapa_genetico
Genes <- c("Gen 1","Gen 2","Gen 3", "Distancia 1-2", "Distancia 2-3")
names(Nuestro_primer_mapa[["Prueba de 3 puntos"]]) <- Genes
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(5, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
View(Nuestro_primer_mapa)
Genes <- c("Gen 1","Gen 2","Gen 3", "Distancia 1-2", "Distancia 2-3")
# Cambio de titulo
names(Nuestro_primer_mapa) <- "Prueba de 3 puntos"
View(Nuestro_primer_mapa)
names(Nuestro_primer_mapa[["Prueba de 3 puntos"]]) <- Genes
frecuencias_fenotipicas # Resultado de la función
(numerador_1/denominador)*100
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("Gen 1","Gen 2","Gen 3")
names(Nuestro_primer_mapa[["Prueba de 3 puntos"]]) <- Genes
# Cambio de titulo
names(Nuestro_primer_mapa) <- "Prueba de 3 puntos"
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos",m.cex = 0.8) -> Mapa_genetico
Genes <- c("Gen 1","Gen 2","Gen 3")
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- ((numerador_2/denominador)*100)) + ((numerador_1/denominador)*100))  # Distancia de A a C
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (((numerador_2/denominador)*100)) + ((numerador_1/denominador)*100)))  # Distancia de A a C
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (((numerador_2/denominador)*100)) + ((numerador_1/denominador)*100))  # Distancia de A a C
Nuestro_primer_mapa[["1"]][["D1M3"]] <- ((((numerador_2/denominador)*100))+((numerador_1/denominador)*100))  # Distancia de A a C
numerador_2/denominador)*100))+((numerador_1/denominador)*100
((((numerador_2/denominador)*100))+((numerador_1/denominador)*100))  # D
names(Nuestro_primer_mapa[["Prueba de 3 puntos"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos") -> Mapa_genetico
Nuestro_primer_mapa[["1"]][["Gen 2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["Gen 3"]] <- ((((numerador_2/denominador)*100))+((numerador_1/denominador)*100))  # Distancia de A a C
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos") -> Mapa_genetico
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
View(Nuestro_primer_mapa)
Nuestro_primer_mapa[["1"]][["D1M2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["1"]][["D1M3"]] <- (numerador_2/denominador)*100 # Distancia de A a C
Genes <- c("Gen 1","Gen 2","Gen 3")
names(Nuestro_primer_mapa[["1"]]) <- Genes
linkmap(Nuestro_primer_mapa, chr = "1") -> Mapa_genetico
# Cambio de titulo
names(Nuestro_primer_mapa) <- "Prueba de 3 puntos"
View(Nuestro_primer_mapa)
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos",m.cex = 0.8) -> Mapa_genetico
Nuestro_primer_mapa[["Prueba de 3 puntos"]][["Gen 2"]] <- (numerador_1/denominador)*100 # Distancia de A a B
Nuestro_primer_mapa[["Prueba de 3 puntos"]][["Gen 3"]] <- ((((numerador_2/denominador)*100))+((numerador_1/denominador)*100))  # Distancia de A a C
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos") -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", m.cex = 0.8) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", m.cex = 0.8, interval = TRUE) -> Mapa_genetico
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", m.cex = 0.8, interval = TRUE) -> Mapa_genetico
