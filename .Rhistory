axes =FALSE, main = "Mapa genético"
)
text(posiciones, rep(0, length(posiciones)), labels = nuevo_arreglo, pos = 3)
axis(1, at = posiciones, labels = posiciones)
}
Mapa_genetico(prueba_distancias)
prueba_distancias
Mapa_genetico<- function(x) {
if (ncol(x) != nrow(x)) {
print("Por favor introduce una matriz cuadrada")
} else
rownames(x)<- LETTERS[1:nrow(x)]
colnames(x)<- LETTERS[1:ncol(x)]
clusters <- hclust(as.dist(x), method = "average")
nuevo_arreglo <- clusters$labels[clusters$order]
matriz_ordenada <- x[nuevo_arreglo, nuevo_arreglo]
nueva_diagonal<-diag(matriz_ordenada[-1, -ncol(matriz_ordenada)])
posiciones<-cumsum(c(0,nueva_diagonal))
plot(
posiciones, rep(0, length(posiciones)),
pch = 16, xlab = "Distancia (cM)", ylab = "",col = "darkblue",
axes =FALSE, main = "Mapa genético"
)
text(posiciones, rep(0, length(posiciones)), labels = nuevo_arreglo, pos = 3)
axis(1, at = posiciones, labels = posiciones)
}
Mapa_genetico(prueba_distancias)
Mapa_genetico(prueba_distancias, c("A","B"))
Mapa_genetico(prueba_distancias, c("A","B", "c", "d", "f", "g"))
asdf<- c("A","B", "c", "d", "f", "g")
Mapa_genetico(prueba_distancias, asdf)
genes_mapa<- c("G1","G2","G3","G4","K","E","Cd","G5","G6","G7")
genes_mapa<- c("G1","G2","G3","G4","K","E","Cd","G5","G6","G7")
matriz_mapa_genetico<- matrix( c(0,9,13,15,22,8,10,10,9,11,
11,0,17,13,13,12,4,7,6,5,
8,9,0,11,10,11,10,11,21,8,
7,6,7,0,9,10,11,12,14,6,
4,1,2,9,0,7,4,7,11,6,
5,2,5,8,9,0,5,10,10,11,
9,7,5,1,4,4,0,9,8,6,
8,9,11,22,7,7,8,0,13,12,
21,23,22,17,16,12,12,8,0,7,
5,6,7,8,9,12,10,0,11,0), ncol = 10, byrow = TRUE)
as.mapa.genetico<- function(x, etiquetas = FALSE) {
if (ncol(x) != nrow(x)) {
print("Por favor introduce una matriz cuadrada")
} else
if (all(etiquetas != FALSE) & nrow(x) == length(etiquetas)){
rownames(x) <- etiquetas
colnames(x) <- etiquetas
} else {
rownames(x) <- LETTERS[1:nrow(x)]
colnames(x) <- LETTERS[1:ncol(x)]
}
clusters <- hclust(as.dist(x), method = "average")
nuevo_arreglo <- clusters$labels[clusters$order]
matriz_ordenada <- x[nuevo_arreglo, nuevo_arreglo]
nueva_diagonal<-diag(matriz_ordenada[-1, -ncol(matriz_ordenada)])
posiciones<-cumsum(c(0,nueva_diagonal))
plot(
posiciones, rep(0, length(posiciones)),
pch = 16, xlab = "Distancia (cM)", ylab = "",col = "darkblue",
axes =FALSE, main = "Mapa genético"
)
text(posiciones, rep(0, length(posiciones)), labels = nuevo_arreglo, pos = 3)
axis(1, at = posiciones, labels = posiciones)
}
as.mapa.genetico(matriz_mapa_genetico, genes_mapa)
matriz_mapa_genetico<- matrix( c(0, 17, 12, 2, 17, 4, 4, 19, 1, 17,
17, 0, 5, 17, 18, 20, 19, 10, 10, 5,
12, 5, 0, 9, 6, 20, 2, 2, 20, 19,
2, 17, 9, 0, 20, 1, 7, 3, 1, 6,
17, 18, 6, 20, 0, 7, 2, 14, 3, 9,
4, 20, 20, 1, 7, 0, 5, 3, 15, 6,
4, 19, 2, 7, 2, 5, 0, 7, 12, 1,
19, 10, 2, 3, 14, 3, 7, 0, 4, 11,
1, 10, 20, 1, 3, 15, 12, 4, 0, 6,
17, 5, 19, 6, 9, 6, 1, 11, 6, 0), ncol = 10, byrow = TRUE)
genes_mapa<- c("G1","G2","G3","G4","K","E","Cd","G5","G6","G7")
as.mapa.genetico(matriz_mapa_genetico, genes_mapa)
matriz_mapa_genetico<- matrix( c(0, 17, 12, 2, 17, 4, 4, 19, 1, 17,
17, 0, 5, 17, 18, 20, 19, 10, 10, 5,
12, 5, 0, 9, 6, 20, 2, 2, 20, 19,
2, 17, 9, 0, 20, 1, 7, 3, 1, 6,
17, 18, 6, 20, 0, 7, 2, 14, 3, 9,
4, 20, 20, 1, 5, 0, 5, 3, 15, 6,
4, 19, 2, 7, 2, 5, 0, 7, 12, 1,
19, 10, 2, 3, 14, 3, 7, 0, 4, 11,
1, 10, 20, 1, 3, 15, 12, 4, 0, 6,
17, 5, 19, 6, 9, 6, 1, 11, 6, 0), ncol = 10, byrow = TRUE)
as.mapa.genetico(matriz_mapa_genetico, genes_mapa)
Genes
as.mapa.genetico(Ejemplo1_3puntos_inversa) # Así se obseraría la grafica si no utilizamos
as.mapa.genetico(Ejemplo1_3puntos_inversa)
Mapa_genetico_p3p
Mapa_genetico_p3p <- as.mapa.genetico(Ejemplo1_3puntos_inversa, Genes) # Para utilizar la función solo hay
Ejemplo1_3puntos_inversa
Mapa_genetico_p3p <- as.mapa.genetico(Ejemplo1_3puntos_inversa, Genes) # Para utilizar la función solo hay
library("qtl")
library(qtl)
Mapa_genetico_p3p <- as.mapa.genetico(Ejemplo1_3puntos_inversa, Genes) # Para utilizar la función solo hay
as.mapa.genetico(Ejemplo1_3puntos_inversa) # Así se obseraría la grafica si no utilizamos
linkmap <- function(object, chr, chr.space = 2, m.cex = 0.6, interval = FALSE, ruler = FALSE, ...){
# VERSION: 1.1.0
# object: a "cross" object from R/qtl, or a "map" class from the output of "pull.map" in R/qtl, or a data frame with marker column, chromosme column and position column named as "mar", "chr" and "pos", respectively
# chr: a vector of chromosome names that need to be drawn.
# chr.space: space between each chromosomes
# m.cex: font size
# interval: NULL/TRUE/FALSE: plot no distance/marker interval/absolute distance. Default is absolute distance.
# ruler: whether to draw a common left ruler on the left
# ...: other plot parameters
if ("data.frame" %in% class(object)){ # transform to a list
pos = object$pos
names(pos) = object$mar
map = split(pos,object$chr)
} else if ("cross" %in% class(object)){
map <- pull.map(object)
} else map = object # a map object or list
dots <- list(...) # extra parameters inputed by user
old.xpd <- par("xpd")
par(xpd = TRUE)
on.exit(par(xpd = old.xpd))
if(!missing(chr)) {
if(any(is.na(pmatch(chr, names(map)))))
stop("Some names of chromosome(s) subset do not match names of map.")
map <- map[chr]
}
n.chr <- length(map)
#mt <- list()
maxlen <- max(unlist(lapply(map, max)))
minlen <- min(unlist(lapply(map, min)))
omap <- map # omap is original map
if(!is.na(pmatch("cex", names(dots))))
dots$cex <- NULL
#    else cex <- par("cex")
chrpos <- seq(1, n.chr * chr.space, by = chr.space)
thelim <- range(chrpos) + c(-1.0, 1.0)
# function to get actual plotting postion
finalPos = function(pos, maxlen) {#pos is a vector of positions of A genetic map; maxlen is the length of chromosome segments
posnew = pos
if (length(posnew) > 1){
conv <- par("pin")[2]/maxlen # pin is The current plot dimensions, (width, height), in inches.
for(j in 1:(length(pos) - 1)){
ch <- posnew[j + 1]*conv - (posnew[j]*conv + 10*par("csi")*m.cex/9) # csi is the default font height
#cat(ch)
if (ch < 0){
temp <- posnew[j]*conv + 10*par("csi")*m.cex/9
posnew[j + 1] <- temp/conv
}
}
}
return(posnew)
}
# function to get interval
getInterval = function(pos){#pos is a vector of positions of A genetic map
pos2 = unique(round(pos,1))
ll = length(pos2)
pos3 = (pos2[1:(ll-1)] + pos2[2:ll])/2 # map position
pos4 = pos2[2:ll] - pos2[1:(ll-1)] # intervals
return(list(pos3,pos4))
}
# plot left side
total_len = maxlen - minlen # in case chromosome did not start from 0
mt = lapply(map, finalPos, maxlen= total_len) # final label postion on the right
if (!is.null(interval)) {
if (interval) {
map2 = lapply(map, function(x) getInterval(x)[[1]]) # chromsome position for the left
map3 = lapply(map, function(x) getInterval(x)[[2]]) # intervals
mt2 = lapply(map2, finalPos, maxlen=total_len) # distance plotting position on the left
} else {
map2 = map # left and right are the same
map3 = map
mt2 = mt # left and right are the same
}
}
maxlen <- max(c(unlist(lapply(omap, max)),unlist(lapply(mt, max))))
names(mt) <- names(map)
par(mar=c(0.6 ,1.1 ,2.6 ,1.1))
if (ruler) par(mar=c(0.6, 2.1, 2.6, 1.1))
plot(0, 0, type = "n", ylim = c(maxlen, minlen), xlim = thelim,
xaxs = "i", ylab = "", xlab = "", axes = FALSE, ...)
if (ruler) axis(side = 2,  ylim = c(maxlen, minlen))
else chrpos = chrpos - 0.3
## Draw chromosomes
barwidth = 0.14
seglen = 0.06
for(i in 1:n.chr) {
# for the right side plotting
Rstart = chrpos[i] + barwidth # start point for legs on the RIGHT
segments(Rstart, map[[i]], Rstart + seglen, map[[i]])
segments(Rstart + seglen, map[[i]], Rstart + seglen*3, mt[[i]])
segments(Rstart + seglen*3, mt[[i]], Rstart + seglen*4, mt[[i]])
alis <- list(x = Rstart + seglen*4 + 0.05, y = mt[[i]], labels = names(map[[i]]), adj = c(0, 0.5), cex = m.cex)
do.call("text", c(alis, dots)) # draw right labels
# JZ: add distance on the left
if (!is.null(interval)){
Lstart = chrpos[i] - barwidth # start point for legs on the LEFT
segments(Lstart, map2[[i]], Lstart - seglen, map2[[i]])
segments(Lstart - seglen, map2[[i]], Lstart - seglen*3, mt2[[i]])
segments(Lstart - seglen*3, mt2[[i]], Lstart - seglen*4, mt2[[i]])
alisL <- list(x = Lstart - seglen*4 - 0.05, y =  mt2[[i]], labels = format(round(map3[[i]], 1),nsmall=1),adj = c(1, 0.5), cex = m.cex)
do.call("text", c(alisL, dots)) # draw left labels
}
# draw chromosome bar
map[[i]] <- omap[[i]]
barl <- chrpos[i] - barwidth/2
barr <- chrpos[i] + barwidth/2
segments(barl, min(map[[i]]), barl, max(map[[i]]), lwd = 3)
segments(barr, min(map[[i]]), barr, max(map[[i]]), lwd = 3)
segments(barl - barwidth/2, map[[i]], barr + barwidth/2, map[[i]]) # bar ribs
# attempt to put curves at ends of chromosomes
rs <- seq(0,pi,len=100)
r <- (barr - barl)/2 # radius
xunit = par("pin")[1]/abs(par("xaxp")[2] - par("xaxp")[1])
yunit = par("pin")[2]/abs(par("yaxp")[2] - par("yaxp")[1])
xseq <- r*cos(rs)
yseq <- r*sin(rs)*(xunit/yunit)
lines(xseq + chrpos[i], min(map[[i]]) - yseq, lwd=3)
lines(xseq + chrpos[i], max(map[[i]]) + yseq, lwd=3)
}
axis(side = 3, at = chrpos, labels = names(map), tick = F, cex.axis=1.5) # side = 1 for bottom, side=3 for top
#if(is.na(pmatch("main", names(dots))) & !as.logical(sys.parent()))
#  title("Genetic Map")
invisible(list(mt = mt, map = map, chrpos = chrpos))
}
Mapa_genetico_p3p <- as.mapa.genetico(Ejemplo1_3puntos_inversa, Genes) # Para utilizar la función solo hay
as.mapa.genetico(Ejemplo1_3puntos_inversa) # Así se obseraría la grafica si no utilizamos
Ejemplo1_3puntos_inversa <- prueba3puntos.inv(Ejemplo1_3puntos_base_datos$Coeficiente_coincidencia,
Ejemplo1_3puntos_base_datos$Distancias_Zona_1,
Ejemplo1_3puntos_base_datos$Distancias_Zona_2,
gen1_parental = "K", gen2_parental = "e", gen3_parental = "CD",
total = 4000, inf.observados = TRUE)
Mapa_genetico_p3p <- as.mapa.genetico(Ejemplo1_3puntos_inversa, Genes) # Para utilizar la función solo hay
Ejemplo1_3puntos_inversa$Resultados_estimacion
### Mapa Genetico ###
Genes <- c ("K", "e", "CD") # Para utilizar esta función se recomiend crear un vector
Mapa_genetico_p3p <- as.mapa.genetico(Ejemplo1_3puntos_inversa, Genes) # Para utilizar la función solo hay
as.mapa.genetico(Ejemplo1_3puntos_inversa) # Así se obseraría la grafica si no utilizamos
library(qtl)
linkmap <- function(object, chr, chr.space = 2, m.cex = 0.6, interval = FALSE, ruler = FALSE, ...){
# VERSION: 1.1.0
# object: a "cross" object from R/qtl, or a "map" class from the output of "pull.map" in R/qtl, or a data frame with marker column, chromosme column and position column named as "mar", "chr" and "pos", respectively
# chr: a vector of chromosome names that need to be drawn.
# chr.space: space between each chromosomes
# m.cex: font size
# interval: NULL/TRUE/FALSE: plot no distance/marker interval/absolute distance. Default is absolute distance.
# ruler: whether to draw a common left ruler on the left
# ...: other plot parameters
if ("data.frame" %in% class(object)){ # transform to a list
pos = object$pos
names(pos) = object$mar
map = split(pos,object$chr)
} else if ("cross" %in% class(object)){
map <- pull.map(object)
} else map = object # a map object or list
dots <- list(...) # extra parameters inputed by user
old.xpd <- par("xpd")
par(xpd = TRUE)
on.exit(par(xpd = old.xpd))
if(!missing(chr)) {
if(any(is.na(pmatch(chr, names(map)))))
stop("Some names of chromosome(s) subset do not match names of map.")
map <- map[chr]
}
n.chr <- length(map)
#mt <- list()
maxlen <- max(unlist(lapply(map, max)))
minlen <- min(unlist(lapply(map, min)))
omap <- map # omap is original map
if(!is.na(pmatch("cex", names(dots))))
dots$cex <- NULL
#    else cex <- par("cex")
chrpos <- seq(1, n.chr * chr.space, by = chr.space)
thelim <- range(chrpos) + c(-1.0, 1.0)
# function to get actual plotting postion
finalPos = function(pos, maxlen) {#pos is a vector of positions of A genetic map; maxlen is the length of chromosome segments
posnew = pos
if (length(posnew) > 1){
conv <- par("pin")[2]/maxlen # pin is The current plot dimensions, (width, height), in inches.
for(j in 1:(length(pos) - 1)){
ch <- posnew[j + 1]*conv - (posnew[j]*conv + 10*par("csi")*m.cex/9) # csi is the default font height
#cat(ch)
if (ch < 0){
temp <- posnew[j]*conv + 10*par("csi")*m.cex/9
posnew[j + 1] <- temp/conv
}
}
}
return(posnew)
}
# function to get interval
getInterval = function(pos){#pos is a vector of positions of A genetic map
pos2 = unique(round(pos,1))
ll = length(pos2)
pos3 = (pos2[1:(ll-1)] + pos2[2:ll])/2 # map position
pos4 = pos2[2:ll] - pos2[1:(ll-1)] # intervals
return(list(pos3,pos4))
}
# plot left side
total_len = maxlen - minlen # in case chromosome did not start from 0
mt = lapply(map, finalPos, maxlen= total_len) # final label postion on the right
if (!is.null(interval)) {
if (interval) {
map2 = lapply(map, function(x) getInterval(x)[[1]]) # chromsome position for the left
map3 = lapply(map, function(x) getInterval(x)[[2]]) # intervals
mt2 = lapply(map2, finalPos, maxlen=total_len) # distance plotting position on the left
} else {
map2 = map # left and right are the same
map3 = map
mt2 = mt # left and right are the same
}
}
maxlen <- max(c(unlist(lapply(omap, max)),unlist(lapply(mt, max))))
names(mt) <- names(map)
par(mar=c(0.6 ,1.1 ,2.6 ,1.1))
if (ruler) par(mar=c(0.6, 2.1, 2.6, 1.1))
plot(0, 0, type = "n", ylim = c(maxlen, minlen), xlim = thelim,
xaxs = "i", ylab = "", xlab = "", axes = FALSE, ...)
if (ruler) axis(side = 2,  ylim = c(maxlen, minlen))
else chrpos = chrpos - 0.3
## Draw chromosomes
barwidth = 0.14
seglen = 0.06
for(i in 1:n.chr) {
# for the right side plotting
Rstart = chrpos[i] + barwidth # start point for legs on the RIGHT
segments(Rstart, map[[i]], Rstart + seglen, map[[i]])
segments(Rstart + seglen, map[[i]], Rstart + seglen*3, mt[[i]])
segments(Rstart + seglen*3, mt[[i]], Rstart + seglen*4, mt[[i]])
alis <- list(x = Rstart + seglen*4 + 0.05, y = mt[[i]], labels = names(map[[i]]), adj = c(0, 0.5), cex = m.cex)
do.call("text", c(alis, dots)) # draw right labels
# JZ: add distance on the left
if (!is.null(interval)){
Lstart = chrpos[i] - barwidth # start point for legs on the LEFT
segments(Lstart, map2[[i]], Lstart - seglen, map2[[i]])
segments(Lstart - seglen, map2[[i]], Lstart - seglen*3, mt2[[i]])
segments(Lstart - seglen*3, mt2[[i]], Lstart - seglen*4, mt2[[i]])
alisL <- list(x = Lstart - seglen*4 - 0.05, y =  mt2[[i]], labels = format(round(map3[[i]], 1),nsmall=1),adj = c(1, 0.5), cex = m.cex)
do.call("text", c(alisL, dots)) # draw left labels
}
# draw chromosome bar
map[[i]] <- omap[[i]]
barl <- chrpos[i] - barwidth/2
barr <- chrpos[i] + barwidth/2
segments(barl, min(map[[i]]), barl, max(map[[i]]), lwd = 3)
segments(barr, min(map[[i]]), barr, max(map[[i]]), lwd = 3)
segments(barl - barwidth/2, map[[i]], barr + barwidth/2, map[[i]]) # bar ribs
# attempt to put curves at ends of chromosomes
rs <- seq(0,pi,len=100)
r <- (barr - barl)/2 # radius
xunit = par("pin")[1]/abs(par("xaxp")[2] - par("xaxp")[1])
yunit = par("pin")[2]/abs(par("yaxp")[2] - par("yaxp")[1])
xseq <- r*cos(rs)
yseq <- r*sin(rs)*(xunit/yunit)
lines(xseq + chrpos[i], min(map[[i]]) - yseq, lwd=3)
lines(xseq + chrpos[i], max(map[[i]]) + yseq, lwd=3)
}
axis(side = 3, at = chrpos, labels = names(map), tick = F, cex.axis=1.5) # side = 1 for bottom, side=3 for top
#if(is.na(pmatch("main", names(dots))) & !as.logical(sys.parent()))
#  title("Genetic Map")
invisible(list(mt = mt, map = map, chrpos = chrpos))
}
as.mapa.genetico <- function(data, Genes = c("A","B","C")) {
Nuestro_primer_mapa <-sim.map(len = rep(100,1), n.mar = c(3, 1), anchor.tel = FALSE, include.x = FALSE,
sex.sp =FALSE, eq.spacing = FALSE) #Objeto base
names(Nuestro_primer_mapa) <- "Prueba de 3 puntos"
# Modificar para que el usuario meta el nombre de los genes
names(Nuestro_primer_mapa[["Prueba de 3 puntos"]]) <- Genes
Nuestro_primer_mapa[["Prueba de 3 puntos"]][[Genes[2]]] <- data$Distancias_Zona_1
Nuestro_primer_mapa[["Prueba de 3 puntos"]][[Genes[3]]] <- data$Distancias_Zona_1 +  data$Distancias_Zona_2
linkmap(Nuestro_primer_mapa, chr = "Prueba de 3 puntos", m.cex = 0.8, interval = TRUE) -> Mapa_genetico
print(Mapa_genetico)
}
Ejemplo1_3puntos_inversa <- prueba3puntos.inv(Ejemplo1_3puntos_base_datos$Coeficiente_coincidencia,
Ejemplo1_3puntos_base_datos$Distancias_Zona_1,
Ejemplo1_3puntos_base_datos$Distancias_Zona_2,
gen1_parental = "K", gen2_parental = "e", gen3_parental = "CD",
total = 4000, inf.observados = TRUE)
### Mapa Genetico ###
Genes <- c ("K", "e", "CD") # Para utilizar esta función se recomiend crear un vector
Ejemplo1_3puntos_inversa
Mapa_genetico_p3p <- as.mapa.genetico(Ejemplo1_3puntos_inversa, Genes) # Para utilizar la función solo hay
Mapa_genetico_p3p <- as.mapa.genetico(Ejemplo1_3puntos_inversa, Genes) # Para utilizar la función solo hay
as.mapa.genetico(Ejemplo1_3puntos_inversa) # Así se obseraría la grafica si no utilizamos
### Mapa Genetico ###
Genes <- c ("K", "e", "CD") # Para utilizar esta función se recomiend crear un vector
Mapa_genetico_p3p <- as.mapa.genetico(Ejemplo1_3puntos_inversa, Genes) # Para utilizar la función solo hay
Ejemplo1_3puntos_inversa
linkmap <- function(object, chr, chr.space = 2, m.cex = 0.6, interval = FALSE, ruler = FALSE, ...){
# VERSION: 1.1.0
# object: a "cross" object from R/qtl, or a "map" class from the output of "pull.map" in R/qtl, or a data frame with marker column, chromosme column and position column named as "mar", "chr" and "pos", respectively
# chr: a vector of chromosome names that need to be drawn.
# chr.space: space between each chromosomes
# m.cex: font size
# interval: NULL/TRUE/FALSE: plot no distance/marker interval/absolute distance. Default is absolute distance.
# ruler: whether to draw a common left ruler on the left
# ...: other plot parameters
if ("data.frame" %in% class(object)){ # transform to a list
pos = object$pos
names(pos) = object$mar
map = split(pos,object$chr)
} else if ("cross" %in% class(object)){
map <- pull.map(object)
} else map = object # a map object or list
dots <- list(...) # extra parameters inputed by user
old.xpd <- par("xpd")
par(xpd = TRUE)
on.exit(par(xpd = old.xpd))
if(!missing(chr)) {
if(any(is.na(pmatch(chr, names(map)))))
stop("Some names of chromosome(s) subset do not match names of map.")
map <- map[chr]
}
n.chr <- length(map)
#mt <- list()
maxlen <- max(unlist(lapply(map, max)))
minlen <- min(unlist(lapply(map, min)))
omap <- map # omap is original map
if(!is.na(pmatch("cex", names(dots))))
dots$cex <- NULL
#    else cex <- par("cex")
chrpos <- seq(1, n.chr * chr.space, by = chr.space)
thelim <- range(chrpos) + c(-1.0, 1.0)
# function to get actual plotting postion
finalPos = function(pos, maxlen) {#pos is a vector of positions of A genetic map; maxlen is the length of chromosome segments
posnew = pos
if (length(posnew) > 1){
conv <- par("pin")[2]/maxlen # pin is The current plot dimensions, (width, height), in inches.
for(j in 1:(length(pos) - 1)){
ch <- posnew[j + 1]*conv - (posnew[j]*conv + 10*par("csi")*m.cex/9) # csi is the default font height
#cat(ch)
if (ch < 0){
temp <- posnew[j]*conv + 10*par("csi")*m.cex/9
posnew[j + 1] <- temp/conv
}
}
}
return(posnew)
}
# function to get interval
getInterval = function(pos){#pos is a vector of positions of A genetic map
pos2 = unique(round(pos,1))
ll = length(pos2)
pos3 = (pos2[1:(ll-1)] + pos2[2:ll])/2 # map position
pos4 = pos2[2:ll] - pos2[1:(ll-1)] # intervals
return(list(pos3,pos4))
}
# plot left side
total_len = maxlen - minlen # in case chromosome did not start from 0
mt = lapply(map, finalPos, maxlen= total_len) # final label postion on the right
if (!is.null(interval)) {
if (interval) {
map2 = lapply(map, function(x) getInterval(x)[[1]]) # chromsome position for the left
map3 = lapply(map, function(x) getInterval(x)[[2]]) # intervals
mt2 = lapply(map2, finalPos, maxlen=total_len) # distance plotting position on the left
} else {
map2 = map # left and right are the same
map3 = map
mt2 = mt # left and right are the same
}
}
maxlen <- max(c(unlist(lapply(omap, max)),unlist(lapply(mt, max))))
names(mt) <- names(map)
par(mar=c(0.6 ,1.1 ,2.6 ,1.1))
if (ruler) par(mar=c(0.6, 2.1, 2.6, 1.1))
plot(0, 0, type = "n", ylim = c(maxlen, minlen), xlim = thelim,
xaxs = "i", ylab = "", xlab = "", axes = FALSE, ...)
if (ruler) axis(side = 2,  ylim = c(maxlen, minlen))
else chrpos = chrpos - 0.3
## Draw chromosomes
barwidth = 0.14
seglen = 0.06
for(i in 1:n.chr) {
# for the right side plotting
Rstart = chrpos[i] + barwidth # start point for legs on the RIGHT
segments(Rstart, map[[i]], Rstart + seglen, map[[i]])
segments(Rstart + seglen, map[[i]], Rstart + seglen*3, mt[[i]])
segments(Rstart + seglen*3, mt[[i]], Rstart + seglen*4, mt[[i]])
alis <- list(x = Rstart + seglen*4 + 0.05, y = mt[[i]], labels = names(map[[i]]), adj = c(0, 0.5), cex = m.cex)
do.call("text", c(alis, dots)) # draw right labels
# JZ: add distance on the left
if (!is.null(interval)){
Lstart = chrpos[i] - barwidth # start point for legs on the LEFT
segments(Lstart, map2[[i]], Lstart - seglen, map2[[i]])
segments(Lstart - seglen, map2[[i]], Lstart - seglen*3, mt2[[i]])
segments(Lstart - seglen*3, mt2[[i]], Lstart - seglen*4, mt2[[i]])
alisL <- list(x = Lstart - seglen*4 - 0.05, y =  mt2[[i]], labels = format(round(map3[[i]], 1),nsmall=1),adj = c(1, 0.5), cex = m.cex)
do.call("text", c(alisL, dots)) # draw left labels
}
# draw chromosome bar
map[[i]] <- omap[[i]]
barl <- chrpos[i] - barwidth/2
barr <- chrpos[i] + barwidth/2
segments(barl, min(map[[i]]), barl, max(map[[i]]), lwd = 3)
segments(barr, min(map[[i]]), barr, max(map[[i]]), lwd = 3)
segments(barl - barwidth/2, map[[i]], barr + barwidth/2, map[[i]]) # bar ribs
# attempt to put curves at ends of chromosomes
rs <- seq(0,pi,len=100)
r <- (barr - barl)/2 # radius
xunit = par("pin")[1]/abs(par("xaxp")[2] - par("xaxp")[1])
yunit = par("pin")[2]/abs(par("yaxp")[2] - par("yaxp")[1])
xseq <- r*cos(rs)
yseq <- r*sin(rs)*(xunit/yunit)
lines(xseq + chrpos[i], min(map[[i]]) - yseq, lwd=3)
lines(xseq + chrpos[i], max(map[[i]]) + yseq, lwd=3)
}
axis(side = 3, at = chrpos, labels = names(map), tick = F, cex.axis=1.5) # side = 1 for bottom, side=3 for top
#if(is.na(pmatch("main", names(dots))) & !as.logical(sys.parent()))
#  title("Genetic Map")
invisible(list(mt = mt, map = map, chrpos = chrpos))
}
Mapa_genetico_p3p <- as.mapa.genetico(Ejemplo1_3puntos_inversa, Genes) # Para utilizar la función solo hay
