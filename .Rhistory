resultados <- data.frame(
Tipo_cruza = c("Parental","Parental","Recombinante simple de zona 1", "Recombinante simple de zona 1",
"Recombinante simple de zona 2","Recombinante simple de zona 2",
"Recombinante doble","Recombinante doble"),
Genotipo = c(paste(gen1_parental,gen2_parental,gen3_parental),
paste(gen1_parental,"-",gen2_parental,"-",gen3_parental,"-"),
paste(gen1_parental,gen2_parental,"-",gen3_parental,"-"),
paste(gen1_parental,"-",gen2_parental,gen3_parental),
paste(gen1_parental,gen2_parental,gen3_parental,"-"),
paste(gen1_parental,"-",gen2_parental,"-",gen3_parental),
paste(gen1_parental,gen2_parental,"-",gen3_parental),
paste(gen1_parental,"-",gen2_parental,gen3_parental,"-")),
Observados_esperados = c(num_parentales/2,num_parentales/2,num_simples_zona1/2,num_simples_zona1/2,
num_simples_zona2/2,num_simples_zona2/2,num_dobles_recombinantes/2,num_dobles_recombinantes/2),
Frecuencia_esperada = c(frec_parentales/2, frec_parentales/2,frec_simples_zona1/2,frec_simples_zona1/2,
frec_simples_zona2/2,frec_simples_zona2/2,frec_dobles_recombinantes/2,frec_dobles_recombinantes/2)
)
resultados <- list(
Resultados_estimacion = Genotipo,
Frecuencia_parental = frec_parentales,
Frecuencia_simples_zona1 = frec_simples_zona1,
Frecuencia_simple_zona2 = frec_simples_zona2,
Frecuencia_dobles_Recombinantes = frec_dobles_recombinantes
)
} else{ # Aqui vamos a poner lo que pasa si total != FALSE pero inf.observados == FALSE
resultados <- data.frame(
Tipo_cruza = c("Parental","Recombinante simple de zona 1", "Recombinante simple de zona 2",
"Recombinante doble"),
Genotipo = c(c(paste(gen1_parental,gen2_parental,gen3_parental,"and",gen1_parental,"-",gen2_parental,"-",gen3_parental,"-")),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"-","and",gen1_parental,"-",gen2_parental,gen3_parental)),
c(paste(gen1_parental,gen2_parental,gen3_parental,"-","and",gen1_parental,"-",gen2_parental,"-",gen3_parental)),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"and",gen1_parental,"-",gen2_parental,gen3_parental,"-"))),
Observados_esperados = c(num_parentales,num_simples_zona1,num_simples_zona2,num_dobles_recombinantes),
Frecuencia = c(frec_parentales,frec_simples_zona1,frec_simples_zona2,frec_dobles_recombinantes)
)
resultados <- list(
Resultados_estimacion = Genotipo,
Frecuencia_parental = frec_parentales,
Frecuencia_simples_zona1 = frec_simples_zona1,
Frecuencia_simple_zona2 = frec_simples_zona2,
Frecuencia_dobles_Recombinantes = frec_dobles_recombinantes
)
}
} else{ # Aqui vamos a poner lo que pasa si total = FALSE
resultados <- data.frame(
Tipo_cruza = c("Parental","Recombinante simple de zona 1", "Recombinante simple de zona 2",
"Recombinante doble"),
Genotipo = c(c(paste(gen1_parental,gen2_parental,gen3_parental,"and",gen1_parental,"-",gen2_parental,"-",gen3_parental,"-")),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"-","and",gen1_parental,"-",gen2_parental,gen3_parental)),
c(paste(gen1_parental,gen2_parental,gen3_parental,"-","and",gen1_parental,"-",gen2_parental,"-",gen3_parental)),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"and",gen1_parental,"-",gen2_parental,gen3_parental,"-"))),
Frecuencia = c(frec_parentales,frec_simples_zona1,frec_simples_zona2,frec_dobles_recombinantes)
)
resultados <- list(
Resultados_estimacion = Genotipo,
Frecuencia_parental = frec_parentales,
Frecuencia_simples_zona1 = frec_simples_zona1,
Frecuencia_simple_zona2 = frec_simples_zona2,
Frecuencia_dobles_Recombinantes = frec_dobles_recombinantes
)
}
}
eje <- prueba3puntos.inv(0.994035,7,5.03,gen1_parental = "K",
gen2_parental = "e",
gen3_parental = "CD",
total = 4000, inf.observados = TRUE)
prueba3puntos.inv <- function(Coeficiente_consistencia, Distancia_zona1, Distancia_zona2,
gen1_parental = "A", gen2_parental = "B", gen3_parental = "C",
total = FALSE, inf.observados = FALSE){
frec_dobles_recombinantes <- ((Distancia_zona1/100)*(Distancia_zona2/100))*Coeficiente_consistencia
frec_simples_zona1 <- ((Distancia_zona1/100)-frec_dobles_recombinantes)
frec_simples_zona2 <- ((Distancia_zona2/100)-frec_dobles_recombinantes)
frec_parentales <- 1 - (frec_simples_zona2+frec_simples_zona1)
if (total != FALSE){ # Aqui vamos a poner lo que pasa si total = a un numero
num_dobles_recombinantes <- frec_dobles_recombinantes*total
num_simples_zona1 <- frec_simples_zona1*total
num_simples_zona2 <- frec_simples_zona2*total
num_parentales <- frec_parentales*total
if (inf.observados == TRUE){ # Aqui vamos a poner lo que pasa si total != FALSE e inf.observados != FALSE
Data.frame_resultados <- data.frame(
Tipo_cruza = c("Parental","Parental","Recombinante simple de zona 1", "Recombinante simple de zona 1",
"Recombinante simple de zona 2","Recombinante simple de zona 2",
"Recombinante doble","Recombinante doble"),
Genotipo = c(paste(gen1_parental,gen2_parental,gen3_parental),
paste(gen1_parental,"-",gen2_parental,"-",gen3_parental,"-"),
paste(gen1_parental,gen2_parental,"-",gen3_parental,"-"),
paste(gen1_parental,"-",gen2_parental,gen3_parental),
paste(gen1_parental,gen2_parental,gen3_parental,"-"),
paste(gen1_parental,"-",gen2_parental,"-",gen3_parental),
paste(gen1_parental,gen2_parental,"-",gen3_parental),
paste(gen1_parental,"-",gen2_parental,gen3_parental,"-")),
Observados_esperados = c(num_parentales/2,num_parentales/2,num_simples_zona1/2,num_simples_zona1/2,
num_simples_zona2/2,num_simples_zona2/2,num_dobles_recombinantes/2,num_dobles_recombinantes/2),
Frecuencia_esperada = c(frec_parentales/2, frec_parentales/2,frec_simples_zona1/2,frec_simples_zona1/2,
frec_simples_zona2/2,frec_simples_zona2/2,frec_dobles_recombinantes/2,frec_dobles_recombinantes/2)
)
resultados <- list(
Resultados_estimacion = Data.frame_resultados,
Frecuencia_parental = frec_parentales,
Frecuencia_simples_zona1 = frec_simples_zona1,
Frecuencia_simple_zona2 = frec_simples_zona2,
Frecuencia_dobles_Recombinantes = frec_dobles_recombinantes
)
} else{ # Aqui vamos a poner lo que pasa si total != FALSE pero inf.observados == FALSE
Data.frame_resultados <- data.frame(
Tipo_cruza = c("Parental","Recombinante simple de zona 1", "Recombinante simple de zona 2",
"Recombinante doble"),
Genotipo = c(c(paste(gen1_parental,gen2_parental,gen3_parental,"and",gen1_parental,"-",gen2_parental,"-",gen3_parental,"-")),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"-","and",gen1_parental,"-",gen2_parental,gen3_parental)),
c(paste(gen1_parental,gen2_parental,gen3_parental,"-","and",gen1_parental,"-",gen2_parental,"-",gen3_parental)),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"and",gen1_parental,"-",gen2_parental,gen3_parental,"-"))),
Observados_esperados = c(num_parentales,num_simples_zona1,num_simples_zona2,num_dobles_recombinantes),
Frecuencia = c(frec_parentales,frec_simples_zona1,frec_simples_zona2,frec_dobles_recombinantes)
)
resultados <- list(
Resultados_estimacion = Data.frame_resultados,
Frecuencia_parental = frec_parentales,
Frecuencia_simples_zona1 = frec_simples_zona1,
Frecuencia_simple_zona2 = frec_simples_zona2,
Frecuencia_dobles_Recombinantes = frec_dobles_recombinantes
)
}
} else{ # Aqui vamos a poner lo que pasa si total = FALSE
Data.frame_resultados <- data.frame(
Tipo_cruza = c("Parental","Recombinante simple de zona 1", "Recombinante simple de zona 2",
"Recombinante doble"),
Genotipo = c(c(paste(gen1_parental,gen2_parental,gen3_parental,"and",gen1_parental,"-",gen2_parental,"-",gen3_parental,"-")),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"-","and",gen1_parental,"-",gen2_parental,gen3_parental)),
c(paste(gen1_parental,gen2_parental,gen3_parental,"-","and",gen1_parental,"-",gen2_parental,"-",gen3_parental)),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"and",gen1_parental,"-",gen2_parental,gen3_parental,"-"))),
Frecuencia = c(frec_parentales,frec_simples_zona1,frec_simples_zona2,frec_dobles_recombinantes)
)
resultados <- list(
Resultados_estimacion = Data.frame_resultados,
Frecuencia_parental = frec_parentales,
Frecuencia_simples_zona1 = frec_simples_zona1,
Frecuencia_simple_zona2 = frec_simples_zona2,
Frecuencia_dobles_Recombinantes = frec_dobles_recombinantes
)
}
}
eje <- prueba3puntos.inv(0.994035,7,5.03,gen1_parental = "K",
gen2_parental = "e",
gen3_parental = "CD",
total = 4000, inf.observados = TRUE)
eje
prueba3puntos.inv <- function(Coeficiente_consistencia, Distancia_zona1, Distancia_zona2,
gen1_parental = "A", gen2_parental = "B", gen3_parental = "C",
total = FALSE, inf.observados = FALSE){
frec_dobles_recombinantes <- ((Distancia_zona1/100)*(Distancia_zona2/100))*Coeficiente_consistencia
frec_simples_zona1 <- ((Distancia_zona1/100)-frec_dobles_recombinantes)
frec_simples_zona2 <- ((Distancia_zona2/100)-frec_dobles_recombinantes)
frec_parentales <- 1 - (frec_simples_zona2+frec_simples_zona1)
if (total != FALSE){ # Aqui vamos a poner lo que pasa si total = a un numero
num_dobles_recombinantes <- frec_dobles_recombinantes*total
num_simples_zona1 <- frec_simples_zona1*total
num_simples_zona2 <- frec_simples_zona2*total
num_parentales <- frec_parentales*total
if (inf.observados == TRUE){ # Aqui vamos a poner lo que pasa si total != FALSE e inf.observados != FALSE
Data.frame_resultados <- data.frame(
Tipo_cruza = c("Parental","Parental","Recombinante simple de zona 1", "Recombinante simple de zona 1",
"Recombinante simple de zona 2","Recombinante simple de zona 2",
"Recombinante doble","Recombinante doble"),
Genotipo = c(paste(gen1_parental,gen2_parental,gen3_parental),
paste(gen1_parental,"-",gen2_parental,"-",gen3_parental,"-"),
paste(gen1_parental,gen2_parental,"-",gen3_parental,"-"),
paste(gen1_parental,"-",gen2_parental,gen3_parental),
paste(gen1_parental,gen2_parental,gen3_parental,"-"),
paste(gen1_parental,"-",gen2_parental,"-",gen3_parental),
paste(gen1_parental,gen2_parental,"-",gen3_parental),
paste(gen1_parental,"-",gen2_parental,gen3_parental,"-")),
Observados_esperados = c(num_parentales/2,num_parentales/2,num_simples_zona1/2,num_simples_zona1/2,
num_simples_zona2/2,num_simples_zona2/2,num_dobles_recombinantes/2,num_dobles_recombinantes/2),
Frecuencia_esperada = c(frec_parentales/2, frec_parentales/2,frec_simples_zona1/2,frec_simples_zona1/2,
frec_simples_zona2/2,frec_simples_zona2/2,frec_dobles_recombinantes/2,frec_dobles_recombinantes/2)
)
resultados <- list(
Resultados_estimacion = Data.frame_resultados,
Frecuencia_parental = frec_parentales,
Frecuencia_simple_zona1 = frec_simples_zona1,
Frecuencia_simple_zona2 = frec_simples_zona2,
Frecuencia_dobles_Recombinantes = frec_dobles_recombinantes
)
} else{ # Aqui vamos a poner lo que pasa si total != FALSE pero inf.observados == FALSE
Data.frame_resultados <- data.frame(
Tipo_cruza = c("Parental","Recombinante simple de zona 1", "Recombinante simple de zona 2",
"Recombinante doble"),
Genotipo = c(c(paste(gen1_parental,gen2_parental,gen3_parental,"and",gen1_parental,"-",gen2_parental,"-",gen3_parental,"-")),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"-","and",gen1_parental,"-",gen2_parental,gen3_parental)),
c(paste(gen1_parental,gen2_parental,gen3_parental,"-","and",gen1_parental,"-",gen2_parental,"-",gen3_parental)),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"and",gen1_parental,"-",gen2_parental,gen3_parental,"-"))),
Observados_esperados = c(num_parentales,num_simples_zona1,num_simples_zona2,num_dobles_recombinantes),
Frecuencia = c(frec_parentales,frec_simples_zona1,frec_simples_zona2,frec_dobles_recombinantes)
)
resultados <- list(
Resultados_estimacion = Data.frame_resultados,
Frecuencia_parental = frec_parentales,
Frecuencia_simple_zona1 = frec_simples_zona1,
Frecuencia_simple_zona2 = frec_simples_zona2,
Frecuencia_dobles_Recombinantes = frec_dobles_recombinantes
)
}
} else{ # Aqui vamos a poner lo que pasa si total = FALSE
Data.frame_resultados <- data.frame(
Tipo_cruza = c("Parental","Recombinante simple de zona 1", "Recombinante simple de zona 2",
"Recombinante doble"),
Genotipo = c(c(paste(gen1_parental,gen2_parental,gen3_parental,"and",gen1_parental,"-",gen2_parental,"-",gen3_parental,"-")),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"-","and",gen1_parental,"-",gen2_parental,gen3_parental)),
c(paste(gen1_parental,gen2_parental,gen3_parental,"-","and",gen1_parental,"-",gen2_parental,"-",gen3_parental)),
c(paste(gen1_parental,gen2_parental,"-",gen3_parental,"and",gen1_parental,"-",gen2_parental,gen3_parental,"-"))),
Frecuencia = c(frec_parentales,frec_simples_zona1,frec_simples_zona2,frec_dobles_recombinantes)
)
resultados <- list(
Resultados_estimacion = Data.frame_resultados,
Frecuencia_parental = frec_parentales,
Frecuencia_simple_zona1 = frec_simples_zona1,
Frecuencia_simple_zona2 = frec_simples_zona2,
Frecuencia_dobles_Recombinantes = frec_dobles_recombinantes
)
}
}
eje <- prueba3puntos.inv(0.994035,7,5.03,gen1_parental = "K",
gen2_parental = "e",
gen3_parental = "CD",
total = 4000, inf.observados = TRUE)
eje
eje2 <- prueba3puntos.inv(0.994035,7,5.03)
eje2
eje3 <- prueba3puntos.inv(0.994035,7,5.03, total = 4000)
eje3
eje2 <- prueba3puntos.inv(0.994035,7,5.03)
eje2
eje3 <- prueba3puntos.inv(0.994035,7,5.03, total = 4000)
eje3
eje <- prueba3puntos.inv(0.994035,7,5.03,gen1_parental = "K",
gen2_parental = "e",
gen3_parental = "CD",
total = 4000, inf.observados = TRUE)
eje
source("Funciones")
source("02_Scripts/Funciones.R")
Datos_3_puntos <- read.csv("01_Data/Ejercicio3_3_puntos.csv")
Datos_3_puntos$Genotipo
Datos_3_puntos$Frecuencias
Ejemplo1_3puntos_no_base_datos <- prueba3puntos.no(k,e,cd)
Ejemplo1_3puntos_no_base_datos <- prueba3puntos.no("k","e","cd") # debemos ingresar los genes entre comillas.
View(Datos_3_puntos)
View(Datos_3_puntos)
# ingresar que, aquellos con mayor frecuencia (1761, 1773) son los parentales.
# Por lo que se ingresa que, gen1 = k, gen2 = e, gen3 = cd. Entonces se ingresa:
## Parental no tiene expresion fenotipica de K, si tiene de e y no tiene de cd.
## a partir de aqui solo tenemos que ingresar las frecuencias y obtendremos las distancias.
View(Datos_3_puntos)
Ejemplo1_3puntos_no_base_datos <- prueba3puntos.no("k","e","cd") # debemos ingresar los genes entre comillas.
# Si queremos observar el resultado de la funcion podemos imprimir el objeto que guardo la funcion.
Ejemplo1_3puntos_no_base_datos
source("02_Scripts/Funciones.R")
Ejemplo1_3puntos_no_base_datos <- prueba3puntos.no("k","e","cd") # debemos ingresar los genes entre comillas.
# Si queremos observar el resultado de la funcion podemos imprimir el objeto que guardo la funcion.
Ejemplo1_3puntos_no_base_datos
Distancias_Ejemplo1 <- c(Ejemplo1_3puntos_no_base_datos$Distancias_Zona_1,
Ejemplo1_3puntos_no_base_datos$Distancias_Zona_2)
Distancias_Ejemplo1
Ejemplo1_3puntos_base_datos <- prueba3puntos(Datos_3_puntos,"Frecuencias",c("k","e","cd"),fr.wt = 6)
Ejemplo1_3puntos_base_datos
Distancias_Ejemplo2 <- c(Ejemplo1_3puntos_base_datos$Distancias_Zona_1,
Ejemplo1_3puntos_base_datos$Distancias_Zona_2)
Distancias_Ejemplo2
Ejemplo1_3puntos_inversa <- prueba3puntos.inv(Ejemplo1_3puntos_base_datos$Coeficiente_coincidencia,
Ejemplo1_3puntos_base_datos$Distancias_Zona_1,
Ejemplo1_3puntos_base_datos$Distancias_Zona_2,
gen1_parental = "K", gen2_parental = "e", gen3_parental = "CD",
total = 4000)
Ejemplo1_3puntos_inversa
Ejemplo1_3puntos_inversa <- prueba3puntos.inv(Ejemplo1_3puntos_base_datos$Coeficiente_coincidencia,
Ejemplo1_3puntos_base_datos$Distancias_Zona_1,
Ejemplo1_3puntos_base_datos$Distancias_Zona_2,
gen1_parental = "K", gen2_parental = "e", gen3_parental = "CD",
total = 4000, inf.observados = TRUE)
Ejemplo1_3puntos_inversa
Ejemplo1_3puntos_inversa$Resultados_estimacion
Ejemplo1_3puntos_base_datos
readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
i <- 0
while (i == 0){
si <- readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
if (si == "s" | si == "n"){
i + 1
}
}
print ("Por favor ingresa un caracter valido (s/n")
while (i == 0){
si <- readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
if (si == "s" | si == "n"){
i + 1
}else{
print ("Por favor ingresa un caracter valido (s/n")
}
}
while (i < 0){
si <- readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
if (si == "s" | si == "n"){
i <- i + 1
}else{
print ("Por favor ingresa un caracter valido (s/n)")
}
}
while (i < 0){
si <- readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
if (si == "s" | si == "n"){
i <- i + 1
}else{
print ("Por favor ingresa un caracter valido (s/n)")
}
}
print ("Por favor ingresa un caracter valido (s/n)")
while (i < 0){
si <- readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
if (si == "s" | si == "n"){
i <- i + 1
}else{
print ("Por favor ingresa un caracter valido (s/n)")
}
}
while (i < 0){
si <- readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
if (si == "s" | si == "n"){
i <- i + 1
}else{
print ("Por favor ingresa un caracter valido (s/n)")
}
}
si <- readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
si <- readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
while (i < 0){
si <- readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
if (si == "s" | si == "n"){
i <- i + 1
}else{
print ("Por favor ingresa un caracter valido (s/n)")
}
}
si <- c()
while (i < 0){
si <- readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
if (si == "s" | si == "n"){
i <- i + 1
}else{
print ("Por favor ingresa un caracter valido (s/n)")
}
}
while (i < 0){
readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n")) -> si
if (si == "s" | si == "n"){
i <- i + 1
}else{
print ("Por favor ingresa un caracter valido (s/n)")
}
}
print ("Por favor ingresa un caracter valido (s/n)")
print ("Por favor ingresa un caracter valido (s/n)")
readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n")) -> si
i <- 0
si <- c()
while (i == 0){
readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n")) -> si
if (si == "s" | si == "n"){
i <- i + 1
}else{
print ("Por favor ingresa un caracter valido (s/n)")
}
}
source("02_Scripts/Funciones.R")
Ejemplo1_3puntos_no_base_datos <- prueba3puntos.no("k","e","cd") # debemos ingresar los genes entre comillas.
print(paste("hola","\n", "como estas?"))
print(paste("hola",\n, "como estas?"))
print(paste("hola","\n", "como estas?"))
cat("hola","\n", "como estas?")
print(paste("hola \n como estas?"))
cat("hola","\n", "como estas?")
source("02_Scripts/Funciones.R")
Ejemplo1_3puntos_no_base_datos <- prueba3puntos.no("k","e","cd") # debemos ingresar los genes entre comillas.
Ejemplo1_3puntos_inversa
prueba_distancias <- matrix(
c(0, 10, 20, 30, 40, 50,
10, 0, 15, 25, 35, 45,
20, 15, 0, 10, 20, 30,
30, 25, 10, 0, 15, 25,
40, 35, 20, 15, 0, 10,
50, 45, 30, 25, 10, 0),
nrow = 6,
ncol = 6,
byrow = TRUE)
Mapa_genetico<- function(x) {
rownames(x)<- LETTERS[1:nrow(x)]
colnames(x)<- LETTERS[1:ncol(x)]
clusters <- hclust(as.dist(x), method = "average")
nuevo_arreglo <- clusters$labels[clusters$order]
matriz_ordenada <- x[nuevo_arreglo, nuevo_arreglo]
nueva_diagonal<-diag(matriz_ordenada[-1, -ncol(matriz_ordenada)])
posiciones<-cumsum(c(0,nueva_diagonal))
plot(
posiciones, rep(0, length(posiciones)),
pch = 16, xlab = "Distancia (cM)", ylab = "",col = "darkblue",
axes =FALSE, main = "Mapa genético"
)
text(posiciones, rep(0, length(genetic_positions)), labels = nuevo_arreglo, pos = 3)
axis(1, at = posiciones, labels = posiciones)
}
Mapa_genetico(prueba_distancias)
Mapa_genetico<- function(x) {
rownames(x)<- LETTERS[1:nrow(x)]
colnames(x)<- LETTERS[1:ncol(x)]
clusters <- hclust(as.dist(x), method = "average")
nuevo_arreglo <- clusters$labels[clusters$order]
matriz_ordenada <- x[nuevo_arreglo, nuevo_arreglo]
nueva_diagonal<-diag(matriz_ordenada[-1, -ncol(matriz_ordenada)])
posiciones<-cumsum(c(0,nueva_diagonal))
plot(
posiciones, rep(0, length(posiciones)),
pch = 16, xlab = "Distancia (cM)", ylab = "",col = "darkblue",
axes =FALSE, main = "Mapa genético"
)
text(posiciones, rep(0, length(posiciones)), labels = nuevo_arreglo, pos = 3)
axis(1, at = posiciones, labels = posiciones)
}
Mapa_genetico(prueba_distancias)
prueba_distancias
Mapa_genetico<- function(x) {
if (ncol(x) != nrow(x)) {
print("Por favor introduce una matriz cuadrada")
} else
rownames(x)<- LETTERS[1:nrow(x)]
colnames(x)<- LETTERS[1:ncol(x)]
clusters <- hclust(as.dist(x), method = "average")
nuevo_arreglo <- clusters$labels[clusters$order]
matriz_ordenada <- x[nuevo_arreglo, nuevo_arreglo]
nueva_diagonal<-diag(matriz_ordenada[-1, -ncol(matriz_ordenada)])
posiciones<-cumsum(c(0,nueva_diagonal))
plot(
posiciones, rep(0, length(posiciones)),
pch = 16, xlab = "Distancia (cM)", ylab = "",col = "darkblue",
axes =FALSE, main = "Mapa genético"
)
text(posiciones, rep(0, length(posiciones)), labels = nuevo_arreglo, pos = 3)
axis(1, at = posiciones, labels = posiciones)
}
Mapa_genetico(prueba_distancias)
Mapa_genetico(prueba_distancias, c("A","B"))
Mapa_genetico(prueba_distancias, c("A","B", "c", "d", "f", "g"))
asdf<- c("A","B", "c", "d", "f", "g")
Mapa_genetico(prueba_distancias, asdf)
genes_mapa<- c("G1","G2","G3","G4","K","E","Cd","G5","G6","G7")
genes_mapa<- c("G1","G2","G3","G4","K","E","Cd","G5","G6","G7")
matriz_mapa_genetico<- matrix( c(0,9,13,15,22,8,10,10,9,11,
11,0,17,13,13,12,4,7,6,5,
8,9,0,11,10,11,10,11,21,8,
7,6,7,0,9,10,11,12,14,6,
4,1,2,9,0,7,4,7,11,6,
5,2,5,8,9,0,5,10,10,11,
9,7,5,1,4,4,0,9,8,6,
8,9,11,22,7,7,8,0,13,12,
21,23,22,17,16,12,12,8,0,7,
5,6,7,8,9,12,10,0,11,0), ncol = 10, byrow = TRUE)
as.mapa.genetico<- function(x, etiquetas = FALSE) {
if (ncol(x) != nrow(x)) {
print("Por favor introduce una matriz cuadrada")
} else
if (all(etiquetas != FALSE) & nrow(x) == length(etiquetas)){
rownames(x) <- etiquetas
colnames(x) <- etiquetas
} else {
rownames(x) <- LETTERS[1:nrow(x)]
colnames(x) <- LETTERS[1:ncol(x)]
}
clusters <- hclust(as.dist(x), method = "average")
nuevo_arreglo <- clusters$labels[clusters$order]
matriz_ordenada <- x[nuevo_arreglo, nuevo_arreglo]
nueva_diagonal<-diag(matriz_ordenada[-1, -ncol(matriz_ordenada)])
posiciones<-cumsum(c(0,nueva_diagonal))
plot(
posiciones, rep(0, length(posiciones)),
pch = 16, xlab = "Distancia (cM)", ylab = "",col = "darkblue",
axes =FALSE, main = "Mapa genético"
)
text(posiciones, rep(0, length(posiciones)), labels = nuevo_arreglo, pos = 3)
axis(1, at = posiciones, labels = posiciones)
}
as.mapa.genetico(matriz_mapa_genetico, genes_mapa)
matriz_mapa_genetico<- matrix( c(0, 17, 12, 2, 17, 4, 4, 19, 1, 17,
17, 0, 5, 17, 18, 20, 19, 10, 10, 5,
12, 5, 0, 9, 6, 20, 2, 2, 20, 19,
2, 17, 9, 0, 20, 1, 7, 3, 1, 6,
17, 18, 6, 20, 0, 7, 2, 14, 3, 9,
4, 20, 20, 1, 7, 0, 5, 3, 15, 6,
4, 19, 2, 7, 2, 5, 0, 7, 12, 1,
19, 10, 2, 3, 14, 3, 7, 0, 4, 11,
1, 10, 20, 1, 3, 15, 12, 4, 0, 6,
17, 5, 19, 6, 9, 6, 1, 11, 6, 0), ncol = 10, byrow = TRUE)
genes_mapa<- c("G1","G2","G3","G4","K","E","Cd","G5","G6","G7")
as.mapa.genetico(matriz_mapa_genetico, genes_mapa)
matriz_mapa_genetico<- matrix( c(0, 17, 12, 2, 17, 4, 4, 19, 1, 17,
17, 0, 5, 17, 18, 20, 19, 10, 10, 5,
12, 5, 0, 9, 6, 20, 2, 2, 20, 19,
2, 17, 9, 0, 20, 1, 7, 3, 1, 6,
17, 18, 6, 20, 0, 7, 2, 14, 3, 9,
4, 20, 20, 1, 5, 0, 5, 3, 15, 6,
4, 19, 2, 7, 2, 5, 0, 7, 12, 1,
19, 10, 2, 3, 14, 3, 7, 0, 4, 11,
1, 10, 20, 1, 3, 15, 12, 4, 0, 6,
17, 5, 19, 6, 9, 6, 1, 11, 6, 0), ncol = 10, byrow = TRUE)
as.mapa.genetico(matriz_mapa_genetico, genes_mapa)
