library ()
search ()

rnorm (10)
x <- rnorm (10)
x
getwd ()
setwd ("~")
getwd ()
system ('ls -la')
system ("wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/020/647/795/GCF_020647795.1_ASM2064779v1/GCF_020647795.1_ASM2064779v1_cds_from_genomic.fna.gz")

log10(20) < sqrt(4)

x <- seq (-12,30,3)
x 
y <- seq (-14,10,2)
y 

# 1
all (x == 0)
# 2
any (table (x) > 1)
any (sapply (x, function (y) sum (x == y) >= 1))
# 3
all (table (x) > 1)
# 4
any (length (intersect (x,y)) > 0)
# 5
length(x) == length(y) && !all(x < y)
all (x < rep (y, length.out = length (x)))
# 6
all (x < 0)
# 7
any (x [seq_along (x) <= length (y)] > y)
any (x > rep (y, length.out = length(x)))
# 8
all (x = -13)
# 9
any (x < rep (y, length.out = length(x)))

library (msa)
hist (x, col = "darkblue")

# Ejercicio

edades <- c(35,35,70,17,14) #Definimos un vector llamado "edades"
nombres <- c("Jerry","Beth","Rick", "Summer","Morty") #Definimos un vector llamado "edades", del mismo tamaño que "edades"

names(edades) <- nombres #Se nombran los elementos del vector "edades"
edades

mean (edades [-2])
nomorty <- sort (edades [-4])
nomorty
any (edades > 75, edades < 12, edades < 12 & edades > 20)

edades <- c (22, 20, 25, 19, 20, 23, 20, 20, 21, 20)
nombres <- c ("Santiago", "Melisa", "Joaquin", "Alondra", "Luis", "Abraham", "Ivan", "Xymena", "Julieta", "David")
names(edades) <- nombres
edades
# Minimo
min (edades)
# Maximo
max (edades)
# Desviacion estandar
sd (edades)
# Longitud del vector
length (edades)
# Selecciona elementos impares
elementosimpares <- edades [edades %% 2 != 0]
elementosimpares
# Un vector sin el minimo y el maximo
edadeschidas <- edades[-c (which (edades == max(edades)), which (edades == min(edades)))]
edadeschidas 
# Histograma
hist (edades, col = "darkgreen")

x <- c(1,4,9,16,25)
y <- 1:5
y <- y*y
all (x == y)
any (c (x==y) == FALSE)
length (x) == sum(x==y)

# Temperaturas de incubación (en grados Celsius)
temperaturas <- c(37, 37, 25, 30, 30, 37, 25, 25)

# Cálculo de la temperatura media
temp_media <- mean(temperaturas)
cat("Temperatura media:", mean (temperaturas), "°C\n", 
    "La desviación estandar:", sd (temperaturas), "\n", 
    "El máximo de temperatura:", max (temperaturas), "°C\n") 
readline (prompt = "Ingresa tu color vaforito :") -> colorcito
readline (prompt = "Cual es tu materia favorita: ") -> materia
readline (prompt = "Cual es tu bacteria favorita : ") -> bacteria
readline (prompt = "cual es tu promedio: ") -> promedio
cat ("Buen argumento, pero ya que tu materia favorita es", materia, "y tienes una obsesion por", bacteria, "no me sorprende tu promedio de ", promedio)

# Ejercicio avanzado 2
bact <- sample (0:1, size = 50, replace = TRUE)
bact
nombres_bact <- c ("Rhodospirillum rubrum",	"Azotobacter chroococcum",
                   "Chloroflexus aurantiacus",	"Neisseria gonorrhoeae",
                   "Enterobacter aerogenes",	"Haemophilus influenzae",
                   "Serratia marcescens",	"Yersinia enterocolitica",
                   "Salmonella typhi",	"Staphylococcus aureus", "Lactobacillus acidophilus",
                   "Bipolaricaulota","Aerophobota","Calescibacterota", "Calditrichota", "Cloacimonadota", "Dormibacteraeota", "Eremiobacteraeota", "Fermentibacterota", "Hydrogenedentota", "Latescibacteriota", "Marinisomatota", "Margulisbacteria", "Omnitrophot", "Poribacteria", "Hydrothermota", "Zixibacteria", "Dependentiae", "Moduliflexota", "Methylomirabilota", "Tectomicrobia", "Delphibacteria", "Auribacterota", "Firestonebacteria", "Coatesbacteria", "Delongbacteria", "Edwardsbacteria", "Desantisbacteria", "Sumerlaeota", "Riflebacteria", "Goldbacteria", "Eisenbacteria", "Ratteibacteria", "Lindowbacteria", "Muirbacteria", "Wallbacteria", "Krumholzibacteriota", "Binatota", "Mcinerneyibacteriota", "Schekmanbacteria")
length (nombres_bact)
names (bact) <- nombres_bact
bact

length (bact[which (bact > 0)])
which (nombres_bact > 0)[1]

## Biostring ##

library (Biostrings)
library (pwalign)

dna <- DNAString ("ATGCGATACACC")
subseq (dna, 5, 10)

dna2 <- DNAStringSet ( c("ATGC", "GATACA", "GCT-N"))
dna2[[2]][3:5]

width (dna2)
sort (dna2)
names(dna2) <- (c ("Secuencia_1", "Secuencia_2", "Secuencia_3"))
sort (dna2)

translate (dna2[[2]])
reverseComplement (dna2[[3]])
reverse (dna2[[2]])

# Ejercicio de observar caracteristicas de secuencia
dnaDSCAM <- DNAStringSet (c("actcgcccggctcgcaggcagggaaggttggcagagggatccatgtgactgaggccggag", 
                            "cacggcaaagatgagcctgcccgcccgcctgctgcctggatgcggagggtgagggctggc",
                            "gcacgggaggccgctggctgcgcattctgggcgccgagtgcccgggatgagctcacgccc",
                            "gcgtctgcggctctctccacctgccgacctgccgggggcccactgagctgacggcgcacc"))

sort (dnaDSCAM)
translate (dnaDSCAM)
complement (dnaDSCAM)
reverse (dnaDSCAM)
reverseComplement (dnaDSCAM)
alphabetFrequency (dnaDSCAM)
letterFrequency (dnaDSCAM, "GC")

matchPattern ("ATG", dnaDSCAM[[1]])
countPattern ("ATG", dnaDSCAM[[2]])
matchPattern ("TAA", dnaDSCAM[[3]], max.mismatch = 1)
dinucleotideFrequency (dnaDSCAM)
dinucleotideFrequency (dnaDSCAM, as.prob = T)
trinucleotideFrequency (dnaDSCAM)
trinucleotideFrequency (dnaDSCAM, as.prob = T)
findPalindromes (dnaDSCAM[[1]])
findPalindromes (dnaDSCAM[[2]])
alineamiento <- pairwiseAlignment (dnaDSCAM[[1]], dnaDSCAM[[2]], type = "global")
alineamiento
alineamiento2 <- pairwiseAlignment (dnaDSCAM[[2]], dnaDSCAM[[3]], type = "local")
alineamiento2


readDNAStringSet("~/BioInformaticaMARF_2024_2/sequence.fasta")
readDNAStringSet("C:/Users/Miguel/Documents/BioInformaticaMARF_2024_2/sequence.fasta") -> DSCAMFasta
DSCAMFasta

findPalindromes (DSCAMFasta[[1]])
complement (DSCAMFasta)
trinucleotideFrequency (DSCAMFasta)
matchPattern ("ATG", DSCAMFasta[[1]])
countPattern ("ATG", DSCAMFasta[[1]])
alphabetFrequency (DSCAMFasta)
letterFrequency (DSCAMFasta, "TA")

# Ejercicio 1
complinvDNSCAM <- reverseComplement (DSCAMFasta)
letterFrequency (complinvDNSCAM, "A")
subseq (complinvDNSCAM, 3, 7) -> tresasiete
tresasiete

# Ejercicio 2
matchPattern ("AGC", DSCAMFasta[[1]])
matchPattern ("AGC", DSCAMFasta[[1]], max.mismatch = 1)

# Ejercicio 3
alineamiento3 <- pairwiseAlignment (DNAString ("ACGT"), DNAString ("AGCT"), type = "global")
alineamiento3
alineamiento4 <- pairwiseAlignment (DNAString ("ACGT"), DNAString ("CG"), type = "local")
alineamiento4

write.phylip (alineamiento3, "output.phy")
write.phylip (alineamiento4, "~/BioInformaticaMARF_2024_2/alineamientoPhy")


## Estructuras de seleccion ##

# Sirve para escribir script. Es un archivo de texto que se ejecuta de forma secuencial.
# Sigue condicionales. Estructura de seleccion.

# IF
# Obtenemos un valor logico, debe ser uno solo uno, true or false. valores booleanos.
# Si la condicion es verdadera se ejecuta todo lo que esta dentro de los chorchetes, si no pues no.

# Estructura: condicion del if -> {cuerpo de if} -> sigue luego del if.

# Si la condicion arroja un vector de valores logicos entonces if toma el primero que encuentra en el vector.

# Ej. 1

mayor_de_edad <- 18 # Inicializamos la condicion.

edad <- 20 # Inicializamos el objeto que se va a evaluar en el condicional de if.

if (edad >= mayor_de_edad){
  print("Eres mayor de edad")
}

# Ej. 2 si no se cumple el condicional

minimo <- 20000
dinero <- 15000

if (dinero >= minimo){
  print ("¿Cómo está Cancún?")
  print ("La vida es buena")
  sobrante <- dinero - minimo
  print(paste ("Me queda $", sobrante))
}
print ("Acá sigue")

# Ejercicios de Notas de R

# Elabora un programa que compare tu estatura con tu ídolx y determine si eres más altx.

mi_estatura <- 180
idolo_estatura <- 170.5

if (mi_estatura > idolo_estatura){
  print ("waos, soy mas alto que Jaime Altozano, pero nunca más inteligente")
}
if (mi_estatura < idolo_estatura){
  print ("ni en altura le gano al Jaime, toco ser su sirviente")
}

# Toma dos archivos fasta de virus distintos. Leelos con Biostrings y compara sus tamaños ( en bp) 
# y determina si el primero es más grande que el segundo.

library (Biostrings)

readDNAStringSet("C:/Users/Miguel/Documents/BioInformaticaMARF_2024_2/DENGUE.fna") -> DENGUEfasta
readDNAStringSet("C:/Users/Miguel/Documents/BioInformaticaMARF_2024_2/VIH1.fna") -> VIH1fasta

tamañoDENGUE <- width (DENGUEfasta)
tamañoVIH <- width (VIH1fasta)

if (tamañoDENGUE < tamañoVIH){
  print ("El genoma completo del Dengue es más pequeño que el del VIH")
}
if (tamañoDENGUE > tamañoVIH){
  print ("El genoma completo del VIH es más pequeño que el del Dengue")
}

# Combinar booleanos para enuncianos mas complejos.
# & representa el y, se necesitan cumplir las 2 condiciones.
# |  # representa el or. Se necesita cumplir una de las condiciones
# Sirve por ejemplo para intervalos.

# Ej.1
edad <- 21

if (edad >= 18 & edad <=29){
  print("Te toca vacunarte")
}

# Ejercicio 7.3
readline (prompt = "te gusta el mole?, responda con si o no: ") -> mole
readline (prompt = "te gusta el pozole? responda con si o no: ") -> pozole

if (mole == "si" & pozole == "si"){
  print ("genial, entonces eres bienvenido a casa de mi suegra")
} 
if (mole == "si" | pozole == "si"){
  print ("te puedes defender en México, espero")
}

# Ejemplo de If, Else.

minimo <- 20000
vacaciones <- "SI"
dinero <- 21000
if(dinero >= minimo & vacaciones == "SI"){
  print("Me voy a la playa, looser")
}else{
  print("Me quedo en mi casa")
}

# Ejemplo

edad<-21
ifelse(edad>=18, "Ya eres grande","Todavia no puedes beber (legalmente)")

# pasamos a if else

if (edad >= 18){
  print ("Ya eres grande")
}else{
  print ("Todavia no puedes beber (legalmente")
}

# Ejemeplo propio

readline (prompt = "Recordaste traer tu cuaderno (S/N): ") -> cuaderno
ifelse (cuaderno == "S" | cuaderno == "s", "Puedes pasar a clases", "Vete con Don Mike que aqui no prestarás atención")

# Ejemplo de else if

numero <- -27
if (numero > 0){
  print ("Tu número es positivo")
} else if (numero <0){
  print ("Tu número es negativo")
} else { 
  print ("Tu número es cero")
}

# ejercicio

readline (prompt = "¿En que dia naciste?: ") -> diacum
as.numeric (diacum)
readline (prompt = "¿Que número de mes naciste?: ") -> mescum
as.numeric (mescum)
if (mescum >= 2 & mescum <= 1){
  print ("naciste en invierno")
} else if (diacum <= 20 & mescum == 3){
  print ("naciste en invierno pero en marzo")
} else if (diacum >= 21 & mescum == 12){
  print ("naciste en inverno pero en diciembre")
} else if (mescum >= 5 & mescum <= 4){
  print ("naciste en primavera")
} else if (diacum >= 20 & mescum == 3){
  print ("naciste en primavera pero en marzo")
} else if (diacum <= 21 & mescum == 6){
  print ("naciste en primavera pero en junio")
} else if (mescum >= 7 & mescum <= 8){
  print ("naciste en verano")
} else if (diacum >= 21 & mescum == 6){
  print ("naciste en verano pero en junio")
} else if (diacum <= 22 & mescum == 8){
  print ("naciste en verano pero en septiembre")
} else if (mescum >= 9 & mescum <= 11){
  print ("naciste en otoño")
} else if (diacum >= 22 & mescum == 8){
  print ("naciste en otoño pero en septiembre")
} else if (diacum <= 21 & mescum == 12){
  print ("naciste en otoño pero en diciembre")
}  


diacum <- as.numeric (readline (prompt = "¿En que dia naciste?: "))
mescum <- as.numeric (readline (prompt = "¿Que número de mes naciste?: "))
if (diacum >= 22 & mescum == 12){
  print ("eres capricornio")
} else if (diacum <= 20 & mescum == 1){
  print ("eres capricornio")
} else if (diacum >= 21 & mescum == 1){
  print ("eres acuario")
} else if (diacum <= 19 & mescum == 2){
  print ("eres acuario")
} else if (diacum >= 20 & mescum == 2){
  print ("eres piscis")
} else if (diacum <= 20 & mescum == 3){
  print ("eres piscis")
} else if (diacum >= 21 & mescum == 3){
  print ("eres aries")
} else if (diacum <= 20 & mescum == 4){
  print ("eres aries")
} else if (diacum >= 21 & mescum == 4){
  print ("eres tauro")
} else if (diacum <= 20 & mescum == 5){
  print ("eres tauro")
} else if (diacum >= 21 & mescum == 5){
  print ("eres geminis")
} else if (diacum <= 20 & mescum == 6){
  print ("eres geminis")
} else if (diacum >= 21 & mescum == 6){
  print ("eres cancer")
} else if (diacum <= 22 & mescum == 7){
  print ("eres cancer")
} else if (diacum >= 23 & mescum == 7){
  print ("eres leo")
} else if (diacum <= 23 & mescum == 8){
  print ("eres leo")
} else if (diacum >= 24 & mescum == 8){
  print ("eres virgo")
} else if (diacum <= 22 & mescum == 9){
  print ("eres virgo")
} else if (diacum >= 23 & mescum == 9){
  print ("eres libra")
} else if (diacum <= 23 & mescum == 10){
  print ("eres libra")
} else if (diacum >= 24 & mescum == 10){
  print ("eres escorpio")
} else if (diacum <= 22 & mescum == 11){
  print ("eres escorpio")
} else if (diacum >= 23 & mescum == 11){
  print ("eres sagitario")
} else if (diacum <= 21 & mescum == 12){
  print ("eres sagitario")
}

library (BSgenome.Ecoli.NCBI.20080805)
BSgenome.Ecoli.NCBI.20080805$NC_010473 -> e_coli_k12
BSgenome.Ecoli.NCBI.20080805$NC_008253 -> e_coli_536
BSgenome.Ecoli.NCBI.20080805$NC_008563 -> e_coli_APEC_01  
BSgenome.Ecoli.NCBI.20080805$NC_010468 -> e_coli_ATCC_8739
BSgenome.Ecoli.NCBI.20080805$NC_004431 -> e_coli_CFT_073
BSgenome.Ecoli.NCBI.20080805$NC_009801 -> e_coli_O139H28
BSgenome.Ecoli.NCBI.20080805$NC_009800 -> e_coli_HS
BSgenome.Ecoli.NCBI.20080805$NC_002655 -> e_coli_O_157_H7_str._EDL933
BSgenome.Ecoli.NCBI.20080805$NC_002695 -> e_coli_O157_H7_str._Sakai
BSgenome.Ecoli.NCBI.20080805$NC_010498 -> e_coli_SMS_3_5
BSgenome.Ecoli.NCBI.20080805$NC_007946 -> e_coli_UTI89
BSgenome.Ecoli.NCBI.20080805$NC_000913 -> e_coli_K12_substr.MG1655

bacteria <- e_coli_ATCC_8739

if (length (bacteria) > length (e_coli_k12)){
  cat ("tu bacteria tiene genoma mas grande que E.coli k12, ./tiene una diferencia de tamaño de", length (bacteria))
} else {
  print ("tu bacteria tiene genomas mas pequeño que E.coli k12")
}

# Ejercicio 10

temperatura <- as.numeric (readline (prompt = "¿A que temperatura incubaste tu hongo? ¿a 37°C o a 25°C?: "))

ifelse (temperatura == 37, "Tu hongo va a crecer en forma levaduriforme", "Tu hongo va a crecer en forma micelial")

# Ejercicio 11

ambiente <- as.numeric (readline (prompt = "¿cual es la concentracion de oxigeno disuelto de tu ambiente acuatico? en mg/L: "))

if (ambiente > 8){
  print ("Tu ambiente acuatico esta oxigenado")
} else if (ambiente > 4 & ambiente < 8){
  print ("Tu ambiente acuatico es moderadamente oxigenado")
} else {
  print ("Tu ambiente es anoxigenico")
}

# Ejercicio 6
library (Biostrings)
library (BSgenome.Ecoli.NCBI.20080805)
BSgenome.Ecoli.NCBI.20080805$NC_010473 -> e_coli_k12

letterFrequency (e_coli_k12, "GC") -> GC
letterFrequency (e_coli_k12, "ATGC") -> ATGC

GC/ATGC -> porcentaje
if (porcentaje > 0.50){
  print ("Tu porcentaje de GC es mayor al 50%")
} else{
  print ("Tu porcentaje de GC es menor al 50%")
}


library (BSgenome)
available.genomes()
library (msa)
# Para alinear proteinas necesitamos que la secuencia de dna unicamente tenga A, C, T, G. por lo que primero comprobamos.
alphabetFrequency (e_coli_k12)
AA8739 <- translate (e_coli_ATCC_8739[1:201])
AA8739
AA1655 <- translate (e_coli_K12_substr.MG1655[1:201])
AA1655
AAH28 <- translate (e_coli_O139H28[1:201])
AAH28
AA8739 <- AAString (gsub ("//*", "-", AA8739))
AA8739
AA1655 <- AAString(gsub ("//*", "-", AA1655))
AAH28 <- AAString (gsub ("//*", "-", AAH28))
# Posteriormente hacemos un multifasta con stringset y writestringset. Posteriormente lo leemos con readstring set y alineamos.
secalin <- AAStringSet (list (AA1655, AA8739, AAH28))
writeXStringSet (secalin, "fasta_files/output.fasta")
readAAStringSet("fasta_files/output.fasta") -> secalin2
alin1 <- msa (secalin2)
alin1

secalin3 <- DNAStringSet (c (e_coli_k12, e_coli_HS, e_coli_O139H28))
writeXStringSet (secalin3, "ecoli.fasta")
readDNAStringSet ("ecoli.fasta") -> secalin4
alin3 <- msa (secalin4)
alin3

# Vamos a usar un multifasta de globinas, en AA. Lo importamos y lo alineamos con msa. Para verlo completo se usa print y show.
readAAStringSet("C:/Users/Miguel/Documents/BioInformaticaMARF_2024_2/DivergentGlobins.fasta") -> globinas
alin2 <- msa (globinas)
alin2
print (alin2, show = "complete")

file.choose()

library (ggmsa)
