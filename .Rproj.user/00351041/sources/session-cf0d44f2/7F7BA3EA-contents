

# primer intento de funcion para prueba de 3 puntos
# Para empezar vamos a trabajar una funcion. Cosas que necesita la funcion
## Ingresar cuales son los alelos
## ingresar las frecuencias de cada genotipo de las pruebas de cruza

prueba3 <- funtion(gen1,gen2,gen3, dominancia = FALSE){
  posibles_combinaciones <- list(
    c(1,1,1),
    c(0,1,1),
    c(0,1,0),
    c(0,0,1),
    c(0,0,0),
    c(1,0,1),
    c(1,0,0),
    c(1,1,0)
  )
  if (dominancia == FALSE){
    parental1 <- c(
      readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n")),
      readline(prompt = cat("Hay expresion fenotipica de", gen2,"en el progenitor 1? s/n")),
      readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 1? s/n"))
    )
    if (all(parental1 == "n")){
      expresion_parental1 <- c(0,0,0)
    }else if(any(parental1 == "n")){
      expresion_parental1 <- c(0,0,0)
      expresion_parental1[which(parental1 == "s")] <- 1
    }else{
      expresion_parental1 <- c(1,1,1)
    }
    parental2 <- c(
      readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 2? s/n")),
      readline(prompt = cat("Hay expresion fenotipica de", gen2,"en el progenitor 2? s/n")),
      readline(prompt = cat("Hay expresion fenotipica de", gen1,"en el progenitor 2? s/n"))
    )
    if (all(parental2 == "n")){
      expresion_parental2 <- c(0,0,0)
    }else if(any(parental2 == "n")){
      expresion_parental2 <- c(0,0,0)
      expresion_parental2[which(parental2 == "s")] <- 1
    }else{
      expresion_parental2 <- c(1,1,1)
    }
    if (all((expresion_parental1 == expresion_parental2) == FALSE)){
    data.frame(
      
    )
    }else{
      print("ERROR \n
            Tu prueba de 3 puntos estÃ¡ mal planeada ya que los individuos tienen genotipos similares")
    }
  }else{
    ## Aqui va lo que pasa si el fenotipo no es recesivo
  }
}


#### Aqui adelante son pruebas aisladas para verificar que cosas del codigo funcionen de forma aislada
prueba <- function(gen1){
  readline(prompt = cat("eres", gen1,"con respecto a tu padre?"))
}

prueba("igual")
prueba("A")
prueba2 <- c("s","n","s")
if (all(prueba2 == "n")){
  expresion_parental <- c(0,0,0)
}else if(any(prueba2 == "n")){
  expresion_parental <- c(0,0,0)
  expresion_parental[which(prueba2 == "s")] <- 1
}else{
  expresion_parental <- c(1,1,1)
}
expresion_parental
prueba3 <- c("n","n","n")
if (any(prueba3 == "n")){
  expresion_parental2 <- which(prueba3 == "s")
}else{
  expresion_parental2 <- c(1,2,3)
}

vector1 <- c()
vector2 <- c()

all((vector1 == vector2) == TRUE)
expresion_parental == expresion_parental2

posibles_combinaciones <- list(
  c(1,1,1),
  c(0,1,1),
  c(0,1,0),
  c(0,0,1),
  c(0,0,0),
  c(1,0,1),
  c(1,0,0),
  c(1,1,0)
)
all (posibles_combinaciones[[1]] == expresion_parental)
all (posibles_combinaciones[[2]] == expresion_parental)
all (posibles_combinaciones[[3]] == expresion_parental)
all (posibles_combinaciones[[4]] == expresion_parental)
all (posibles_combinaciones[[5]] == expresion_parental)
all (posibles_combinaciones[[6]] == expresion_parental)
all (posibles_combinaciones[[8]] == expresion_parental)
all (posibles_combinaciones[[9]] == expresion_parental)
expresion_parental    
posibles_combinaciones[8]
vector1 <- c(0,"s","s")
vector1
vector1[3]<- 1
vector1[which(vector1 == "s")] <- 1
vector1
which(vector1 == "s")
